<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="pdf_output" qualifiedName="com.servoy.extensions.plugins.pdf_output.PDFProvider" scriptingName="plugins.pdf_output">
        <functions>
          <function clientSupport="wc,sc" name="addMetaData">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="org.mozilla.javascript.Scriptable"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with metaData added]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add metadata to the PDF, like Author]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add metadata to the PDF, like Author]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add metadata to the PDF, like Author
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var metaData = { Author: 'Servoy' };
	pdfResult = %%elementName%%.addMetaData(data, metaData);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="metaData" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="org.mozilla.javascript.Scriptable">
                <description><![CDATA[a JavaScript object (Scriptable) that contains the metadata as property/value pairs]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="combinePDFDocuments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Combine multiple PDF docs into one.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Combine multiple PDF docs into one.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[pdf_blob_column = combinePDFDocuments(new Array(pdf_blob1,pdf_blob2,pdf_blob3));]]></sample>
            </samples>
            <parameters>
              <parameter name="pdf_docs_bytearrays" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the array of documents to combine]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="combineProtectedPDFDocuments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Combine multiple protected PDF docs into one.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Combine multiple protected PDF docs into one.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[pdf_blob_column = combineProtectedPDFDocuments(new Array(pdf_blob1,pdf_blob2,pdf_blob3), new Array(pdf_blob1_pass,pdf_blob2_pass,pdf_blob3_pass));]]></sample>
            </samples>
            <parameters>
              <parameter name="pdf_docs_bytearrays" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the array of documents to combine]]></description>
              </parameter>
              <parameter name="pdf_docs_passwords" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[an array of passwords to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="convertPDFFormToPDFDocument">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Convert a PDF form to a PDF document.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Convert a PDF form to a PDF document.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var pdfform = plugins.file.readFile('c:/temp/1040a-form.pdf');
//var field_values = plugins.file.readFile('c:/temp/1040a-data.fdf');//read adobe fdf values or
var field_values = new Array()//construct field values
field_values[0] = 'f1-1=John C.J.'
field_values[1] = 'f1-2=Longlasting'
var result_pdf_doc = plugins.pdf_output.convertPDFFormToPDFDocument(pdfform, field_values)
if (result_pdf_doc != null)
{
	plugins.file.writeFile('c:/temp/1040a-flatten.pdf', result_pdf_doc)
}]]></sample>
            </samples>
            <parameters>
              <parameter name="pdf_form" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF Form to convert]]></description>
              </parameter>
              <parameter name="field_values" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the values to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="convertProtectedPDFFormToPDFDocument">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Convert a protected PDF form to a PDF document.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Convert a protected PDF form to a PDF document.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var pdfform = plugins.file.readFile('c:/temp/1040a-form.pdf');
//var field_values = plugins.file.readFile('c:/temp/1040a-data.fdf');//read adobe fdf values or
var field_values = new Array()//construct field values
field_values[0] = 'f1-1=John C.J.'
field_values[1] = 'f1-2=Longlasting'
var result_pdf_doc = plugins.pdf_output.convertProtectedPDFFormToPDFDocument(pdfform, 'pdf_password', field_values)
if (result_pdf_doc != null)
{
	plugins.file.writeFile('c:/temp/1040a-flatten.pdf', result_pdf_doc)
}]]></sample>
            </samples>
            <parameters>
              <parameter name="pdf_form" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF Form to convert]]></description>
              </parameter>
              <parameter name="pdf_password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password to use]]></description>
              </parameter>
              <parameter name="field_values" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the field values to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="encrypt">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the owner password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="encrypt">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the owner password]]></description>
              </parameter>
              <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="encrypt">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the owner password]]></description>
              </parameter>
              <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user password]]></description>
              </parameter>
              <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow assembly permission]]></description>
              </parameter>
              <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow copy permission]]></description>
              </parameter>
              <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow degraded printing permission]]></description>
              </parameter>
              <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow fill in permission]]></description>
              </parameter>
              <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify annotations permission]]></description>
              </parameter>
              <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify contents permission]]></description>
              </parameter>
              <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow printing permission]]></description>
              </parameter>
              <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow screen readers permission]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="encrypt">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the owner password]]></description>
              </parameter>
              <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user password]]></description>
              </parameter>
              <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow assembly permission]]></description>
              </parameter>
              <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow copy permission]]></description>
              </parameter>
              <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow degraded printing permission]]></description>
              </parameter>
              <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow fill in permission]]></description>
              </parameter>
              <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify annotations permission]]></description>
              </parameter>
              <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify contents permission]]></description>
              </parameter>
              <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow printing permission]]></description>
              </parameter>
              <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow screen readers permission]]></description>
              </parameter>
              <parameter name="is128bit" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to use 128-bit encryption]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="encrypt">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="org.mozilla.javascript.Scriptable"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the encrypted PDF]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add password protection and security options to the PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add password protection and security options to the PDF
// NOTE: Passwords are case sensitive 
var unEncryptedFile = plugins.file.showFileOpenDialog();
if (unEncryptedFile) {
	var data = plugins.file.readFile(unEncryptedFile);
	encryptedResult = %%elementName%%.encrypt(data, 'secretPassword', 'secretUserPassword', false, false, false, false, false, false, false, false, true);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="ownerPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the owner password]]></description>
              </parameter>
              <parameter name="userPassword" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user password]]></description>
              </parameter>
              <parameter name="allowAssembly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow assembly permission]]></description>
              </parameter>
              <parameter name="allowCopy" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow copy permission]]></description>
              </parameter>
              <parameter name="allowDegradedPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow degraded printing permission]]></description>
              </parameter>
              <parameter name="allowFillIn" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow fill in permission]]></description>
              </parameter>
              <parameter name="allowModifyAnnotations" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify annotations permission]]></description>
              </parameter>
              <parameter name="allowModifyContents" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow modify contents permission]]></description>
              </parameter>
              <parameter name="allowPrinting" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow printing permission]]></description>
              </parameter>
              <parameter name="allowScreenreaders" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to set the allow screen readers permission]]></description>
              </parameter>
              <parameter name="is128bit" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to use 128-bit encryption]]></description>
              </parameter>
              <parameter name="metaData" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="org.mozilla.javascript.Scriptable">
                <description><![CDATA[a JavaScript object (Scriptable) that contains the metadata as property/value pairs]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="endMetaPrintJob">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Ends a previously started meta print job. For meta print jobs that were stored in memory, not in a file on disk, also returns the content of the generated PDF document.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Ends a previously started meta print job.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getPDFPrinter">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a PDF printer that can be used in print calls. Returns the last started meta print job.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a PDF printer that can be used in print calls.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print current record without printdialog to pdf file in temp dir.
controller.print(true,false,plugins.pdf_output.getPDFPrinter());]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getPDFPrinter">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.PrinterJob" typecode="java.awt.print.PrinterJob"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a PDF printer that can be used in print calls. The PDF printer that generates a PDF into the specified file is returned.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a PDF printer that can be used in print calls.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print current record without printdialog to pdf file in temp dir.
controller.print(true,false,plugins.pdf_output.getPDFPrinter('c:/temp/out.pdf'));]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the file name]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getPagesPrinted">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the number of pages printed by the last print call done in the context of a meta print job.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the number of pages printed by the last print call done in the context of a meta print job.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getTotalPagesPrinted">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the total number of pages printed in the context of a meta print job. Call this method before ending the meta print job.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the total number of pages printed in the context of a meta print job.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="insertFontDirectory">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a directory that should be searched for fonts. Call this only in the context of an active meta print job.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a directory that should be searched for fonts.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//Insert font directories for font embedding.
//You must create an MetaPrintJob before using it.
plugins.pdf_output.insertFontDirectory('c:/Windows/Fonts');
plugins.pdf_output.insertFontDirectory('c:/WinNT/Fonts');
plugins.pdf_output.insertFontDirectory('/Library/Fonts');]]></sample>
            </samples>
            <parameters>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="numberPages">
            <argumentsTypes>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with numbered pages]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add pages numbers to a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add pages numbers to a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add pages numbers to a PDF
var unNumberedFile = plugins.file.showFileOpenDialog();
if (unNumberedFile) {
	var data = plugins.file.readFile(unNumberedFile);
	pageNumberedPdf = %%elementName%%.numberPages(data, 12, 520, 30, 'Courier', '#ff0033');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="numberPages">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with numbered pages]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add pages numbers to a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add pages numbers to a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add pages numbers to a PDF
var unNumberedFile = plugins.file.showFileOpenDialog();
if (unNumberedFile) {
	var data = plugins.file.readFile(unNumberedFile);
	pageNumberedPdf = %%elementName%%.numberPages(data, 12, 520, 30, 'Courier', '#ff0033');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="fontSize" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the font size to use]]></description>
              </parameter>
              <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the x location of the numbers]]></description>
              </parameter>
              <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the y location of the numbers]]></description>
              </parameter>
              <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the font to use]]></description>
              </parameter>
              <parameter name="hexColor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the font color to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlay">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="forOverlay" type="byte[]" typecode="[B">
                <description><![CDATA[a PDF to use as overlay]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlay">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="[B"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="forOverlay" type="byte[]" typecode="[B">
                <description><![CDATA[a PDF to use as overlay]]></description>
              </parameter>
              <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether the overlay will be put over the content]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlay">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="[B"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="forOverlay" type="byte[]" typecode="[B">
                <description><![CDATA[a PDF to use as overlay]]></description>
              </parameter>
              <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether the overlay will be put over the content]]></description>
              </parameter>
              <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[an array of page numbers to put the overlay on]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlay">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="[B"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add some PDF based content over a PDF]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add some PDF based content over a PDF
var pages = new Array();
pages[0] = '1';
pages[1] = '3';
pages[2] = '5';
var input1 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select source file');
if (input1) {
	var data = plugins.file.readFile(input1);
	var input2 = plugins.file.showFileOpenDialog(1,null,false,'pdf',null,'Select file for overlay');
	if (input2) {
		var data2 = plugins.file.readFile(input2);
		overlayedPdf = %%elementName%%.overlay( data, data2, false, pages );
		//overlayedPdf = %%elementName%%.overlay( data, data2 );
		//overlayedPdf = %%elementName%%.overlay( data, data2, false, null );
		//overlayedPdf = %%elementName%%.overlay( data, data2, pages );
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="forOverlay" type="byte[]" typecode="[B">
                <description><![CDATA[a PDF to use as overlay]]></description>
              </parameter>
              <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[an array of page numbers to put the overlay on]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlayText">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add text over every page at a 45 degree angle]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add text over every page at a 45 degree angle]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add text over every page at a 45 degree angle\m
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	modifiedPdf = %%elementName%%.overlayText(data, 'DRAFT', 230, 430, true, 32, 'Helvetica', '#33ff33');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text to use for the overlay]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="overlayText">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added overlay]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add text over every page at a 45 degree angle]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add text over every page at a 45 degree angle]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add text over every page at a 45 degree angle\m
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	modifiedPdf = %%elementName%%.overlayText(data, 'DRAFT', 230, 430, true, 32, 'Helvetica', '#33ff33');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text to use for the overlay]]></description>
              </parameter>
              <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the x location of the overlay]]></description>
              </parameter>
              <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the y location of the overlay]]></description>
              </parameter>
              <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to put the overlay over the content]]></description>
              </parameter>
              <parameter name="fontSize" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the font size to use]]></description>
              </parameter>
              <parameter name="font" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the font to use]]></description>
              </parameter>
              <parameter name="hexColor" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the font color to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="startMetaPrintJob">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Used for printing multiple things into the same PDF document. Starts a meta print job and all print calls made before ending the meta print job will be done into the same PDF document. The PDF document is stored in memory and can be retrieved when ending the meta print job and can be saved, for example, into a dataprovider.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Used for printing multiple things into the same PDF document.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="startMetaPrintJob">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Used for printing multiple things into the same PDF document. Starts a meta print job and all print calls made before ending the meta print job will be done into the same PDF document. The PDF document is generated in a File specified by the filename.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Used for printing multiple things into the same PDF document.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//to print multiple forms to one pdf document (on file system).
var success = plugins.pdf_output.startMetaPrintJob('c:/temp/out.pdf')
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
plugins.pdf_output.endMetaPrintJob()

//to print multiple forms to one pdf document (to store in dataprovider).
var success = plugins.pdf_output.startMetaPrintJob()
if (success)
{
	forms.form_one.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form one printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
	forms.form_two.controller.print(false,false,plugins.pdf_output.getPDFPrinter());
	application.output('form two printed ' + plugins.pdf_output.getPagesPrinted() + ' pages.');
}
application.output('total printed pages: ' + plugins.pdf_output.getTotalPagesPrinted());
mediaDataProvider = plugins.pdf_output.endMetaPrintJob()]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the file name]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="watermark">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path of an image to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="watermark">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path of an image to use]]></description>
              </parameter>
              <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the x location of the image]]></description>
              </parameter>
              <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the y location of the image]]></description>
              </parameter>
              <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to put over the content]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="watermark">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"><![CDATA[the PDF with added watermak]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add an image as a watermark on every page, or the pages specified as a parameter]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Add an image as a watermark on every page, or the pages specified as a parameter.
var pdf = plugins.file.showFileOpenDialog();
if (pdf) {
	var data = plugins.file.readFile(pdf);
	var image = plugins.file.showFileOpenDialog();
	modifiedPdf = %%elementName%%.watermark(data, image);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="data" type="byte[]" typecode="[B">
                <description><![CDATA[the PDF]]></description>
              </parameter>
              <parameter name="image" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path of an image to use]]></description>
              </parameter>
              <parameter name="locationX" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the x location of the image]]></description>
              </parameter>
              <parameter name="locationY" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the y location of the image]]></description>
              </parameter>
              <parameter name="isOver" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[whether to put over the content]]></description>
              </parameter>
              <parameter name="pages" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[an array of pages where to apply the watermark]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
