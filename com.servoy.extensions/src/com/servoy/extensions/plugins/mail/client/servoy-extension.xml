<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="Attachment" qualifiedName="com.servoy.extensions.plugins.mail.client.Attachment" scriptingName="Attachment">
        <functions>
          <function clientSupport="wc,sc" name="getData">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a byte array with the content of this attachment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a byte array with the content of this attachment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getMimeType">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the Mime type of this attachment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the Mime type of this attachment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getName">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the name of this attachment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the name of this attachment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="isEmbedded">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns true if this attachment is embedded, false otherwise. Attachments become embedded 
if they are references through tags from the body text of the message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns true if this attachment is embedded, false otherwise.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var logo = plugins.mail.createBinaryAttachment('logo.jpg', plugins.file.readFile('d:/logo.jpg'));
var invoice = plugins.mail.createTextAttachment('invoice.txt', plugins.file.readTXTFile('d:/invoice.txt'));
var attachments = new Array(logo, invoice);
var success = plugins.mail.sendMail(toAddress, fromAddress, 'subject line', 'message text', null, null, attachments, properties);
if (!success)
{
	plugins.dialogs.showWarningDialog('Alert', 'Failed to send mail', 'OK');
}
else
{
	plugins.dialogs.showInfoDialog('Success', 'Mail sent', 'OK');
	application.output('logo attachment name: ' + logo.getName());
	application.output('logo attachment mime type: ' + logo.getMimeType());
	application.output('logo attachment size: ' + logo.getData().length);
	application.output('logo attachment embedded state: ' + logo.isEmbedded());
	application.output('invoice attachment name: ' + invoice.getName());
	application.output('invoice attachment mime type: ' + invoice.getMimeType());
	application.output('invoice attachment size: ' + invoice.getData().length);
	application.output('invoice attachment embedded state: ' + invoice.isEmbedded());
}]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="MailMessage" qualifiedName="com.servoy.extensions.plugins.mail.client.MailMessage">
        <functions>
          <function clientSupport="wc,sc" name="getAttachments">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns an array of Attachment instances corresponding to the attachments of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns an array of Attachment instances corresponding to the attachments of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getCCAddresses">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with all addresses present in the CC field of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with all addresses present in the CC field of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getFromAddresses">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with all addresses present in the From field of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with all addresses present in the From field of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getHeaders">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with all headers of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with all headers of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getHtmlMsg">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with the HTML content of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with the HTML content of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getPlainMsg">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with the plain content of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with the plain content of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getReceivedDate">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a Date instace corresponding to the moment when the message was received.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a Date instace corresponding to the moment when the message was received.]]></summary>
            </summaries>
            <deprecated><![CDATA[No longer supported. Try using  #getHeaders() for approximate results.]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getRecipientAddresses">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with all addresses in the To field of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with all addresses in the To field of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getReplyAddresses">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with all addresses in the Reply-To field of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with all addresses in the Reply-To field of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getSentDate">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a Date instance corresponding to the moment when this message was sent.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a Date instance corresponding to the moment when this message was sent.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getSubject">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a String with the subject of this message.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a String with the subject of this message.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail(username, password, true, 0, null, properties);
if (msgs != null)
{
	for (var i=0; i < msgs.length; i++)
	{
		var msg = msgs[i];
		var str = '';
		str += 'From: ' + msg.getFromAddresses() + '\n';
		str += 'To: ' + msg.getRecipientAddresses() + '\n';
		str += 'CC: ' + msg.getCCAddresses() + '\n';
		str += 'Reply to: ' + msg.getReplyAddresses() + '\n';
		str += 'Received on: ' + msg.getReceivedDate() + '\n';
		str += 'Sent on: ' + msg.getSentDate() + '\n\n';
		str += 'Subject: ' + msg.getSubject() + '\n\n';
		str += 'Plain message: ' + msg.getPlainMsg() + '\n\n';
		str += 'HTML message: ' + msg.getHtmlMsg() + '\n\n';
		str += 'Headers: ' + msg.getHeaders() + '\n\n';
		var attachments = msg.getAttachments();
		if (attachments != null) {
			str += 'Number of attachments: ' + attachments.length + '\n\n';
			for (var j=0; j < attachments.length; j++)
			{
				var attachment = attachments[j];
				str += 'Attachment ' + j + '\n';
				str += '	Name: ' + attachment.getName() + '\n';
				str += '	Size: ' + attachment.getData().length + '\n\n';
			}
		}
		plugins.file.writeTXTFile('msg' + i + '.txt', str);
		application.output('Message ' + i + ' retrieved.');
	}
}
else
{
	application.output("Failed to retrieve messages.");
}]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="mail" qualifiedName="com.servoy.extensions.plugins.mail.client.MailProvider" scriptingName="plugins.mail">
        <functions>
          <function clientSupport="wc,sc" name="createBinaryAttachment">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a binary attachment object.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a binary attachment object.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('logo1.gif',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createBinaryAttachment('logo2.gif',plugins.file.readFile('c:/temp/another_logo.gif'));
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.org>', 'subject', 'msgText',null,null,new Array(attachment1,attachment2));
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="binarydata" type="byte[]" typecode="[B"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createBinaryAttachment">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a binary attachment object.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a binary attachment object.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('logo1.gif',plugins.file.readFile('c:/temp/a_logo.gif', 'image/gif'));
var attachment2 = plugins.mail.createBinaryAttachment('logo2.gif',plugins.file.readFile('c:/temp/another_logo.gif', 'image/gif'));
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.org>', 'subject', 'msgText',null,null,new Array(attachment1,attachment2));
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="binarydata" type="byte[]" typecode="[B"/>
              <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createTextAttachment">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a text based attachment objec with the default 'text/plain' mimetype]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a text based attachment objec with the default 'text/plain' mimetype]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createTextAttachment('readme.html','<html>bla bla bla');
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.com>', 'subject', 'msgText',null,null,attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="textdata" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createTextAttachment">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a text based attachment object.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a text based attachment object.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createTextAttachment('readme.html','<html>bla bla bla', 'text/html');
var success = plugins.mail.sendMail('to_someone@example.com', 'John Cobb <from_me@example.com>', 'subject', 'msgText',null,null,attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="filename" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="textdata" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getLastSendMailException">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <deprecated><![CDATA[Replaced by #getLastSendMailExceptionMsg()]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="getLastSendMailExceptionMsg">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the exception that occurred in the last sendMail attempt (null if no exception occurred).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the exception that occurred in the last sendMail attempt (null if no exception occurred).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.org', 'John Cobb <from_me@example.com>', 'subject', 'my message',null,'unnamed@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert',plugins.mail.getLastSendMailExceptionMsg(),'OK');
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getMailMessage">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage" typecode="com.servoy.extensions.plugins.mail.client.MailMessage"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Helper method, returns MailMessage object from binary or 7bits string.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Helper method, returns MailMessage object from binary or 7bits string.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msg = plugins.mail.getMailMessage(myBlob);
if (msg != null) //if is null error occurred!
{
	application.output(msg.getFromAddresses())
}]]></sample>
            </samples>
            <parameters>
              <parameter name="binaryblob/string"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getPlainMailAddresses">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Helper method to only get the plain addresses.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Helper method to only get the plain addresses.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var plainArray = plugins.mail.getPlainMailAddresses('John Cobb <from_me@example.com>,Pete Cobb<from_pete@example.com>');
application.output(plainArray[0]) //will return 'from_me@example.com']]></sample>
            </samples>
            <parameters>
              <parameter name="addressesString"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="isValidEmailAddress">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Checks whether the given e-mail address is valid or not.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Checks whether the given e-mail address is valid or not.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.mail.isValidEmailAddress("me@example.com");]]></sample>
            </samples>
            <parameters>
              <parameter name="email" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="receiveMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
		application.output(msg.getHtmlMsg())
		application.output(msg.getPlainMsg())
		var attachments = msg.getAttachments()
		if (attachments != null) 
		{
			for (var j = 0 ; j < attachments.length ; j++)
			{
				var attachment = attachments[j]
				application.output(attachment.getName())
				var attachmentDataByteArray = attachment.getData()
				//write attachmentDataByteArray to a file...
			}
		}
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="receiveMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  0);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
              <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="receiveMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
              <argumentType typecode="java.util.Date"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//it is also possible to first receive the headers and later receive a full message with particular 'sentdate'
//var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  0,  theSentDateObjectFormPreviousHeaderLoading);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
              <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
              <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="receiveMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//it is also possible to first receive the headers and later receive a full message
var receiveMode = 0;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS
var pop3Host = 'myserver.com';  
var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  receiveMode,  null, pop3Host);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
		application.output(msg.getHtmlMsg())
		application.output(msg.getPlainMsg())
		var attachments = msg.getAttachments()
		if (attachments != null) 
		{
			for (var j = 0 ; j < attachments.length ; j++)
			{
				var attachment = attachments[j]
				application.output(attachment.getName())
				var attachmentDataByteArray = attachment.getData()
				//write attachmentDataByteArray to a file...
			}
		}
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
              <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
              <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="pop3Host" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="receiveMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Receive mails from pop3 account.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var receiveMode = 1;//0=FULL,1=HEADERS_ONLY,2=NO_ATTACHMENTS

var properties = new Array();
properties[0] = 'mail.pop3.port=995';
properties[1] = 'mail.pop3.ssl.enable=true';
properties[2] = 'mail.pop3.host=myserver.com';
properties[3] = 'mail.pop3.user=user@myserver.com';

var msgs = plugins.mail.receiveMail('mylogin', 'secretpass',  true,  receiveMode,  null, properties);
if (msgs != null) //if is null error occurred!
{
	for (var i = 0 ; i < msgs.length ; i++)
	{
		var msg = msgs[i]
		application.output(msg.getFromAddresses())
		application.output(msg.getRecipientAddresses())
		application.output(msg.getReplyAddresses())
		application.output(msg.getSentDate())
		application.output(msg.getHeaders())
		application.output(msg.getSubject())
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="leaveMsgsOnServer" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean"/>
              <parameter name="receiveMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number"/>
              <parameter name="onlyReceiveMsgWithSentDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="properties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="recieveMail">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.mail.client.MailMessage[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.MailMessage;"/>
            <deprecated><![CDATA[Replaced by #receiveMail(String,String,Boolean,Number,Date,String[])]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="senBulkdMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <deprecated><![CDATA[replaced with plugins.mail.sendBulkMail(to, from, subject, msgText, cc, bcc, attachments, overrideProperties)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
              <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[An array of properties]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>,replyTo@example.com', 'subject', msgText);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,'cc1@example.com,cc2@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
              <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The smtp host]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
              <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[An array of properties]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',[attachment1,attachment2]);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
              <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The smtp host]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendBulkMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).
A bulk email makes it possible for one to not receive "out of office" emails back from receiver.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a bulk mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendBulkMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send bulk mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the bulk mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
              <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[An array of properties]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>,replyTo@example.com', 'subject', msgText);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,'cc1@example.com,cc2@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com');
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',attachment);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
              <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The smtp host]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.mail.client.Attachment"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',attachment,properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachment" type="com.servoy.extensions.plugins.mail.client.Attachment" typecode="com.servoy.extensions.plugins.mail.client.Attachment">
                <description><![CDATA[A single attachment]]></description>
              </parameter>
              <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[An array of properties]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'bcc1@example.com,bcc2@example.com',[attachment1,attachment2]);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
var smtphost = 'myserver.com';
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],smtphost);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
              <parameter name="smtpHost" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The smtp host]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendMail">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Send a mail, if you make the msgText start with <html> the message will be sent in html (and you can use all html formatting).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var attachment1 = plugins.mail.createBinaryAttachment('embedded',plugins.file.readFile('c:/temp/a_logo.gif'));
var attachment2 = plugins.mail.createTextAttachment('embedded','A text attachement');
var msgText = 'plain msg<html>styled html msg<img src="%%embedded%%"></html>';
//it is possbile to set all kind of smtp properties
var properties = new Array()
properties[0] = 'mail.smtp.host=myserver.com'
// properties specification can be found at:http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html
var success = plugins.mail.sendMail('to_someone@example.com,to_someone_else@example.net', 'John Cobb <from_me@example.com>', 'subject', msgText,null,'unnamed@example.com',[attachment1,attachement2],properties);
if (!success) 
{
	plugins.dialogs.showWarningDialog('Alert','Failed to send mail','OK');
}]]></sample>
            </samples>
            <parameters>
              <parameter name="to" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing 1 or multiple addresses seperated by a comma.]]></description>
              </parameter>
              <parameter name="from" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[A string containing an address and an optional reply address, seperated by a comma.]]></description>
              </parameter>
              <parameter name="subject" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The subject of the mail]]></description>
              </parameter>
              <parameter name="msgText" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The message text]]></description>
              </parameter>
              <parameter name="cc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="bcc" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[One or more addresses seperated by a comma]]></description>
              </parameter>
              <parameter name="attachments" type="com.servoy.extensions.plugins.mail.client.Attachment[]" typecode="[Lcom.servoy.extensions.plugins.mail.client.Attachment;">
                <description><![CDATA[The attachments]]></description>
              </parameter>
              <parameter name="overrideProperties" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;">
                <description><![CDATA[An array of properties]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
