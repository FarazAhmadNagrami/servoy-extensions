<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="Cookie" qualifiedName="com.servoy.extensions.plugins.http.Cookie">
        <functions>
          <function clientSupport="wc,sc" name="getComment">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie comment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie comment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getComment();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getDomain">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie domain.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie domain.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var domain = cookie.getDomain();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getName">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var name = cookie.getName();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getPath">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie path.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie path.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getPath();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getSecure">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie secure attribute.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie secure attribute.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var path = cookie.getSecure();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getValue">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the cookie value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the cookie value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('cookieName')
var value = cookie.getValue();]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="DeleteRequest" qualifiedName="com.servoy.extensions.plugins.http.DeleteRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="GetRequest" qualifiedName="com.servoy.extensions.plugins.http.GetRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="HTTP_STATUS" qualifiedName="com.servoy.extensions.plugins.http.HTTP_STATUS">
        <constants>
          <constant clientSupport="wc,sc" name="SC_ACCEPTED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>202 Accepted</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>202 Accepted</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_BAD_GATEWAY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>502 Bad Gateway</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>502 Bad Gateway</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_BAD_REQUEST">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>400 Bad Request</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>400 Bad Request</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_CONFLICT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>409 Conflict</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>409 Conflict</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_CONTINUE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>100 Continue</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>100 Continue</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_CREATED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>201 Created</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>201 Created</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_EXPECTATION_FAILED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>417 Expectation Failed</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>417 Expectation Failed</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_FAILED_DEPENDENCY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>424 Failed Dependency</tt> (WebDAV - RFC 2518)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>424 Failed Dependency</tt> (WebDAV - RFC 2518)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_FORBIDDEN">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>403 Forbidden</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>403 Forbidden</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_GATEWAY_TIMEOUT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>504 Gateway Timeout</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>504 Gateway Timeout</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_GONE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>410 Gone</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>410 Gone</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_HTTP_VERSION_NOT_SUPPORTED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>505 HTTP Version Not Supported</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>505 HTTP Version Not Supported</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_INSUFFICIENT_SPACE_ON_RESOURCE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Static constant for a 419 error.
<tt>419 Insufficient Space on Resource</tt>
(WebDAV - draft-ietf-webdav-protocol-05?)
or <tt>419 Proxy Reauthentication Required</tt>
(HTTP/1.1 drafts?)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Static constant for a 419 error.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_INSUFFICIENT_STORAGE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>507 Insufficient Storage</tt> (WebDAV - RFC 2518)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>507 Insufficient Storage</tt> (WebDAV - RFC 2518)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_INTERNAL_SERVER_ERROR">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>500 Server Error</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>500 Server Error</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_LENGTH_REQUIRED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>411 Length Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>411 Length Required</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_LOCKED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>423 Locked</tt> (WebDAV - RFC 2518)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>423 Locked</tt> (WebDAV - RFC 2518)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_METHOD_FAILURE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Static constant for a 420 error.
<tt>420 Method Failure</tt>
(WebDAV - draft-ietf-webdav-protocol-05?)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Static constant for a 420 error.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_METHOD_NOT_ALLOWED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>405 Method Not Allowed</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>405 Method Not Allowed</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_MOVED_PERMANENTLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>301 Moved Permanently</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>301 Moved Permanently</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_MOVED_TEMPORARILY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>302 Moved Temporarily</tt> (Sometimes <tt>Found</tt>) (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>302 Moved Temporarily</tt> (Sometimes <tt>Found</tt>) (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_MULTIPLE_CHOICES">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>300 Mutliple Choices</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>300 Mutliple Choices</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_MULTI_STATUS">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
OK</tt> (HTTP/1.1 - draft-ietf-http-v11-spec-rev-01?)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>207 Multi-Status</tt> (WebDAV - RFC 2518) or <tt>207 Partial Update
OK</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NON_AUTHORITATIVE_INFORMATION">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>203 Non Authoritative Information</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>203 Non Authoritative Information</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NOT_ACCEPTABLE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>406 Not Acceptable</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>406 Not Acceptable</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NOT_FOUND">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>404 Not Found</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>404 Not Found</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NOT_IMPLEMENTED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>501 Not Implemented</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>501 Not Implemented</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NOT_MODIFIED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>304 Not Modified</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>304 Not Modified</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_NO_CONTENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>204 No Content</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>204 No Content</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_OK">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>200 OK</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>200 OK</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_PARTIAL_CONTENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>206 Partial Content</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>206 Partial Content</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_PAYMENT_REQUIRED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>402 Payment Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>402 Payment Required</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_PRECONDITION_FAILED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>412 Precondition Failed</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>412 Precondition Failed</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_PROCESSING">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>102 Processing</tt> (WebDAV - RFC 2518)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>102 Processing</tt> (WebDAV - RFC 2518)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_PROXY_AUTHENTICATION_REQUIRED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>407 Proxy Authentication Required</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>407 Proxy Authentication Required</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_REQUESTED_RANGE_NOT_SATISFIABLE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>416 Requested Range Not Satisfiable</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>416 Requested Range Not Satisfiable</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_REQUEST_TIMEOUT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>408 Request Timeout</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>408 Request Timeout</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_REQUEST_TOO_LONG">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>413 Request Entity Too Large</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>413 Request Entity Too Large</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_REQUEST_URI_TOO_LONG">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>414 Request-URI Too Long</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>414 Request-URI Too Long</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_RESET_CONTENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>205 Reset Content</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>205 Reset Content</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_SEE_OTHER">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>303 See Other</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>303 See Other</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_SERVICE_UNAVAILABLE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>503 Service Unavailable</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>503 Service Unavailable</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_SWITCHING_PROTOCOLS">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>101 Switching Protocols</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>101 Switching Protocols</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_TEMPORARY_REDIRECT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>307 Temporary Redirect</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>307 Temporary Redirect</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_UNAUTHORIZED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>401 Unauthorized</tt> (HTTP/1.0 - RFC 1945)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>401 Unauthorized</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_UNPROCESSABLE_ENTITY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>422 Unprocessable Entity</tt> (WebDAV - RFC 2518)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>422 Unprocessable Entity</tt> (WebDAV - RFC 2518)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_UNSUPPORTED_MEDIA_TYPE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>415 Unsupported Media Type</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>415 Unsupported Media Type</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="SC_USE_PROXY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[<tt>305 Use Proxy</tt> (HTTP/1.1 - RFC 2616)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[<tt>305 Use Proxy</tt> (HTTP/1.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode();
switch(httpCode) {
		case plugins.http.HTTP_STATUS.SC_OK: application.output("Status OK."); break;
		case plugins.http.HTTP_STATUS.SC_BAD_REQUEST: application.output("Bad request."); break;
		case plugins.http.HTTP_STATUS.SC_FORBIDDEN: application.output("Forbidden."); break;
		case plugins.http.HTTP_STATUS.SC_NO_CONTENT: application.output("No content."); break;
		case plugins.http.HTTP_STATUS.SC_PROCESSING: application.output("Processing request."); break;
		case plugins.http.HTTP_STATUS.SC_REQUEST_TOO_LONG: application.output("The request is too long."); break;
}]]></sample>
            </samples>
          </constant>
        </constants>
      </object>
      <object clientSupport="wc,sc" publicName="HeadRequest" qualifiedName="com.servoy.extensions.plugins.http.HeadRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="HttpClient" qualifiedName="com.servoy.extensions.plugins.http.HttpClient">
        <functions>
          <function clientSupport="wc,sc" name="createDeleteRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.DeleteRequest" typecode="com.servoy.extensions.plugins.http.DeleteRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new delete request (a request to delete a resource on server).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new delete request (a request to delete a resource on server).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createDeleteRequest('http://www.servoy.com/delete.me');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createGetRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.GetRequest" typecode="com.servoy.extensions.plugins.http.GetRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new get request (retrieves whatever information is stored on specified url).
If this url is a https ssl encrypted url which certificates are not in the java certificate store.
(Like a self signed certificate or a none existing root certificate)
Then for a smart client a dialog will be given, to give the user the ability to accept this certificate for the next time.
For a Web or Headless client the system administrator does have to add that certificate (chain) to the java install on the server.
See http://wiki.servoy.com/display/tutorials/Import+a+%28Root%29+certificate+in+the+java+cacerts+file]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new get request (retrieves whatever information is stored on specified url).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createGetRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createHeadRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.HeadRequest" typecode="com.servoy.extensions.plugins.http.HeadRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new head request (similar to get request, must not contain body content).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new head request (similar to get request, must not contain body content).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createHeadRequest('http://www.servoy.com');
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok
var header = response.getResponseHeaders('last-modified');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createOptionsRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.OptionsRequest" typecode="com.servoy.extensions.plugins.http.OptionsRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new options request (a request for information about communication options).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new options request (a request for information about communication options).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createOptionsRequest('http://www.servoy.com');
var methods = request.getAllowedMethods(request.executeRequest());]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createPostRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.PostRequest" typecode="com.servoy.extensions.plugins.http.PostRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a new post request ( Origin server should accept/process the submitted data.)
If this url is a https ssl encrypted url which certificates are not in the java certificate store.
(Like a self signed certificate or a none existing root certificate)
Then for a smart client a dialog will be given, to give the user the ability to accept this certificate for the next time.
For a Web or Headless client the system administrator does have to add that certificate (chain) to the java install on the server.
See http://wiki.servoy.com/display/tutorials/Import+a+%28Root%29+certificate+in+the+java+cacerts+file]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a new post request ( Origin server should accept/process the submitted data.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(globals.twitterUserName, globals.twitterPassword).getStatusCode(); // httpCode 200 is ok]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createPutRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.PutRequest" typecode="com.servoy.extensions.plugins.http.PutRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new put request (similar to post request, contains information to be submitted).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new put request (similar to post request, contains information to be submitted).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var request = client.createPutRequest('http://jakarta.apache.org');
request.setFile('UploadMe.gif');
var httpCode = putRequest.executeRequest().getStatusCode() // httpCode 200 is ok]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createTraceRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.TraceRequest" typecode="com.servoy.extensions.plugins.http.TraceRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new trace request (debug request, server will just echo back).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new trace request (debug request, server will just echo back).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var response = request.executeRequest();
var httpCode = response.getStatusCode(); // httpCode 200 is ok"
var content = response.getResponseBody();]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Cookie" typecode="com.servoy.extensions.plugins.http.Cookie"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get a cookie by name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get a cookie by name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = client.getCookie('JSESSIONID');
if (cookie != null)
{
	// do something
}
else
	client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getCookies">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Cookie[]" typecode="[Lcom.servoy.extensions.plugins.http.Cookie;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all cookies from this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all cookies from this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookies = client.getHttpClientCookies()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setClientProxyCredentials">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set proxy credentials.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set proxy credentials.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[client.setClientProxyCredentials('my_proxy_username','my_proxy_password');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the cookie]]></description>
              </parameter>
              <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the value of the cookie]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the cookie]]></description>
              </parameter>
              <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the value of the cookie]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the domain]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the cookie]]></description>
              </parameter>
              <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the value of the cookie]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the domain]]></description>
              </parameter>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the cookie]]></description>
              </parameter>
              <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the value of the cookie]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the domain]]></description>
              </parameter>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path]]></description>
              </parameter>
              <parameter name="maxAge" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[maximum age of cookie]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the this client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = client.setCookie('JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the cookie]]></description>
              </parameter>
              <parameter name="cookieValue" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the value of the cookie]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the domain]]></description>
              </parameter>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path]]></description>
              </parameter>
              <parameter name="maxAge" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[maximum age of cookie]]></description>
              </parameter>
              <parameter name="secure" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true if it is a secure cookie, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setTimeout">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[client.setTimeout(1000)]]></sample>
            </samples>
            <parameters>
              <parameter name="msTimeout"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="OptionsRequest" qualifiedName="com.servoy.extensions.plugins.http.OptionsRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getAllowedMethods">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.http.Response"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the supported HTTP Request operations as a String Array]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the supported HTTP Request operations as a String Array]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var supportedOperations = request.getAllowedMethods()
application.output(supportedOperations.join(','));]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="PostRequest" qualifiedName="com.servoy.extensions.plugins.http.PostRequest">
        <functions>
          <function clientSupport="wc,sc" name="addFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
            </samples>
            <parameters>
              <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="jsFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
            </samples>
            <parameters>
              <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="jsFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a file to the post.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc')
poster.addFile(null,'postXml.xml','c:/temp/postXml.xml') // sets the xml to post

var f = plugins.file.convertToJSFile('./somefile02.txt')
if (f && f.exists()) poster.addFile('myTxtFileParamName','somefile.txt', f)

f = plugins.file.convertToJSFile('./anotherfile_v2b.txt')
if (f && f.exists()) poster.addFile('myOtherTxtFileParamName', f)]]></sample>
            </samples>
            <parameters>
              <parameter name="parameterName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="fileLocation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addParameter">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a parameter to the post.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a parameter to the post.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[poster.addParameter('name','value')
poster.addParameter(null,'value') //sets the content to post]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="doPost">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <deprecated><![CDATA[Replaced by #executeRequest(String,String,String,String,boolean)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//null
var httpCode = poster.doPost()]]></sample>
            </samples>
            <parameters>
              <parameter name="username" optional="true"/>
              <parameter name="password" optional="true"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getPageData">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the result page data after a post.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the result page data after a post.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by #executeRequest(String,String,String,String,boolean)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var pageData = poster.getPageData()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setBodyContent">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the body of the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the body of the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.setBodyContent(content)]]></sample>
            </samples>
            <parameters>
              <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCharset">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the charset used when posting. If this is null or not called it will use the default charset (UTF-8).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the charset used when posting.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',scopes.globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(scopes.globals.twitterUserName, scopes.globals.twitterPassword).getStatusCode() // httpCode 200 is ok]]></sample>
            </samples>
            <parameters>
              <parameter name="charset"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setEncoding">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setCharset(String)]]></deprecated>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="PutRequest" qualifiedName="com.servoy.extensions.plugins.http.PutRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setBodyContent">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the body of the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the body of the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.setBodyContent(content)]]></sample>
            </samples>
            <parameters>
              <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setCharset">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the charset used when posting. If this is null or not called it will use the default charset (UTF-8).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the charset used when posting.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();
var poster = client.createPostRequest('https://twitter.com/statuses/update.json');
poster.addParameter('status',scopes.globals.textToPost);
poster.addParameter('source','Test Source');
poster.setCharset('UTF-8');
var httpCode = poster.executeRequest(scopes.globals.twitterUserName, scopes.globals.twitterPassword).getStatusCode() // httpCode 200 is ok]]></sample>
            </samples>
            <parameters>
              <parameter name="charset"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set a file to put.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set a file to put.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[putRequest.setFile('c:/temp/manual_01a.doc')]]></sample>
            </samples>
            <parameters>
              <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="Response" qualifiedName="com.servoy.extensions.plugins.http.Response">
        <functions>
          <function clientSupport="wc,sc" name="getCharset">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the charset of the response body.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the charset of the response body.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var charset = response.getCharset();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getMediaData">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the content of response as binary data. It also supports gzip-ed content.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the content of response as binary data.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var mediaData = response.getMediaData();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getResponseBody">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the content of the response as String.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the content of the response as String.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var pageData = response.getResponseBody();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getResponseHeaders">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="com.servoy.j2db.scripting.JSMap"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the headers of the response as name/value arrays.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the headers of the response as name/value arrays.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var allHeaders = response.getResponseHeaders();
var header;

for (header in allHeaders) application.output(header + ': ' + allHeaders[header]);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getResponseHeaders">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="com.servoy.j2db.scripting.JSMap"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the headers of the response as name/value arrays.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the headers of the response as name/value arrays.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var contentLength = response.getResponseHeaders("Content-Length");]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getStatusCode">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the status code of the response, the list of the possible values is in HTTP_STATUS constants.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the status code of the response, the list of the possible values is in HTTP_STATUS constants.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var status = response.getStatusCode();// compare with HTTP_STATUS constants]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="TraceRequest" qualifiedName="com.servoy.extensions.plugins.http.TraceRequest">
        <functions>
          <function clientSupport="wc,sc" name="addHeader">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a header to the request.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.addHeader('Content-type','text/xml; charset=ISO-8859-1')]]></sample>
            </samples>
            <parameters>
              <parameter name="headerName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest('username','password','mycomputername','domain',globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeAsyncRequest">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous. Success callback method will be called when response is received. Response is sent as parameter in callback. If no response is received (request errors out), the errorCallbackMethod is called with exception message as parameter.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method asynchronous.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[method.executeAsyncRequest(globals.successCallback,globals.errorCallback)]]></sample>
            </samples>
            <parameters>
              <parameter name="successCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called after response is received]]></description>
              </parameter>
              <parameter name="errorCallbackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[callbackMethod to be called if request errors out]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute the request method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute the request method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest()]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="executeRequest">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Response" typecode="com.servoy.extensions.plugins.http.Response"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Execute a request method using windows authentication.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var response = method.executeRequest('username','password','mycomputername','domain');]]></sample>
            </samples>
            <parameters>
              <parameter name="userName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the user name]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the password]]></description>
              </parameter>
              <parameter name="workstation" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The workstation the authentication request is originating from.]]></description>
              </parameter>
              <parameter name="domain" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The domain to authenticate within.]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="http" qualifiedName="com.servoy.extensions.plugins.http.HttpProvider" scriptingName="plugins.http">
        <functions>
          <function clientSupport="wc,sc" deprecated="true" name="createHttpClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get or create an http client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get or create an http client.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by #createNewHttpClient().]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createHttpClient();]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createNewHttpClient">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.http.HttpClient" typecode="com.servoy.extensions.plugins.http.HttpClient"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create an http client (like a web browser with session binding) usable todo multiple request/posts in same server session.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create an http client (like a web browser with session binding) usable todo multiple request/posts in same server session.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var client = plugins.http.createNewHttpClient();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="deleteHttpClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Delete a named http client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Delete a named http client.]]></summary>
            </summaries>
            <deprecated><![CDATA[Obsolete method, HttpClient mechanism has changed.]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.http.deleteHttpClient('mybrowser');]]></sample>
            </samples>
            <parameters>
              <parameter name="http_clientname"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getHttpClientCookie">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Cookie" typecode="com.servoy.extensions.plugins.http.Cookie"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get cookie object from the specified client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get cookie object from the specified client.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookie = plugins.http.getHttpClientCookie('clientName', 'JSESSIONID');
if (cookie != null)
{
	// do something
}
else
	plugins.http.setHttpClientCookie('clientName', 'JSESSIONID', 'abc', 'localhost', '/', -1, false)]]></sample>
            </samples>
            <parameters>
              <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="cookieName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getHttpClientCookies">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.Cookie[]" typecode="[Lcom.servoy.extensions.plugins.http.Cookie;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a Cookie array with all the cookies set on the specified client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a Cookie array with all the cookies set on the specified client.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookies = plugins.http.getHttpClientCookies('clientName')]]></sample>
            </samples>
            <parameters>
              <parameter name="clientName"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getLastPageCharset">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the charset of the last page received with getPageData(...)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the charset of the last page received with getPageData(.]]></summary>
            </summaries>
            <deprecated><![CDATA[Obsolete method.]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var a = plugins.http.getPageData('http://www.google.com.hk');
var charset = plugins.http.getLastPageCharset();
var success = plugins.file.writeTXTFile('someFilePath', a, charset);
if (!success) plugins.dialogs.showWarningDialog('Warning', 'Could not write file', 'OK');]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getLastPageEncoding">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <deprecated><![CDATA[Obsolete method.]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="getMediaData">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get media (binary data) such as images in a variable. It also supports gzip-ed content.
If this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get media (binary data) such as images in a variable.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var image_byte_array = plugins.http.getMediaData('http://www.cnn.com/cnn.gif');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getMediaData">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get media (binary data) such as images in a variable. It also supports gzip-ed content.
If this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get media (binary data) such as images in a variable.]]></summary>
            </summaries>
            <deprecated><![CDATA[Obsolete method.]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var image_byte_array = plugins.http.getMediaData('http://www.cnn.com/cnn.gif');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getPageData">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all page html in a variable, if this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all page html in a variable, if this url is an https url that uses certificates unknown to Java
then you have to use the HttpClient so that smart client users will get the unknown certificate dialog that they then can accept
or you must make sure that those server certificates are stored in the cacerts of the java vm that is used (this is required for a web or headless client)]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// get data using a default connection
var pageData = plugins.http.getPageData('http://www.cnn.com');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getPageData">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all page html in a variable (authentication only works with http client usage). A http client will be created/used.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all page html in a variable (authentication only works with http client usage).]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.createGetRequest(String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create an http client and use it to get the data
var pageData = plugins.http.getPageData('http://www.cnn.com','myclient');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="httpClientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getPageData">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all page html in a variable (authentication only works with http client usage). If name is provided a http client will be created/used.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all page html in a variable (authentication only works with http client usage).]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.createGetRequest(String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create an http client and use it to get the data
var pageData = plugins.http.getPageData('http://www.admin.com','myclient','myuser','secret');]]></sample>
            </samples>
            <parameters>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="httpClientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getPoster">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.http.PostRequest" typecode="com.servoy.extensions.plugins.http.PostRequest"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get poster object to do http (file) posts. If posting files, it will post multipart!]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get poster object to do http (file) posts.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient#createPostRequest(String).]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var poster = plugins.http.getPoster('http://www.abc.com/apply_form.jsp');
var didAddParam = poster.addParameter('myParamName','myValue');
var didAddFile = poster.addFile('myFileParamName','manual.doc','c:/temp/manual_01a.doc');
var httpCode = poster.doPost('username','mypassword'); //httpCode 200 is ok
//var httpCode = poster.doPost('username','mypassword'); //use if authentication is needed
var pageData = poster.getPageData()]]></sample>
            </samples>
            <parameters>
              <parameter name="url"/>
              <parameter name="http_clientname" optional="true"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="put">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Put a file at the specified URL.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Put a file at the specified URL.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.createPutRequest(String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var fileAdded = plugins.http.put('clientName', 'http://www.abc.com/put_stuff.jsp', 'manual.doc', 'c:/temp/manual_01a.doc')]]></sample>
            </samples>
            <parameters>
              <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="put">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Put a file at the specified URL, using authentication.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Put a file at the specified URL, using authentication.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.createPutRequest(String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var fileAdded = plugins.http.put('clientName', 'http://www.abc.com/put_stuff.jsp', 'manual.doc', 'c:/temp/manual_01a.doc', 'user', 'password')]]></sample>
            </samples>
            <parameters>
              <parameter name="clientName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="url" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="filePath" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setClientProxyCredentials">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the proxy username and password. Used for named http clients (else use implicit java data).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the proxy username and password.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.setClientProxyCredentials(String,String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.http.setClientProxyCredentials('my_proxy_username','my_proxy_password');]]></sample>
            </samples>
            <parameters>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setClientProxyUserNamePassword">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the proxy username and password. Used for named http clients (else use implicit java data).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the proxy username and password.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient.setClientProxyCredentials(String,String)]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.http.setClientProxyUserNamePassword('my_proxy_username','my_proxy_password');]]></sample>
            </samples>
            <parameters>
              <parameter name="username"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setHttpClientCookie">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add cookie to the specified client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add cookie to the specified client.]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient#setCookie(String,String).]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var cookieSet = plugins.http.setHttpClientCookie('clientName', 'JSESSIONID', 'abc', 'localhost', '/', -1, false)
if (cookieSet)
{
	//do something
}]]></sample>
            </samples>
            <parameters>
              <parameter name="clientName"/>
              <parameter name="cookieName"/>
              <parameter name="cookieValue"/>
              <parameter name="domain" optional="true"/>
              <parameter name="path" optional="true"/>
              <parameter name="maxAge" optional="true"/>
              <parameter name="secure" optional="true"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setTimeout">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets a timeout in milliseconds for retrieving of data (when 0 there is no timeout).]]></summary>
            </summaries>
            <deprecated><![CDATA[Replaced by HttpClient#setTimeout(Object[]).]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.http.setTimeout(1000,'client_name')]]></sample>
            </samples>
            <parameters>
              <parameter name="msTimeout"/>
              <parameter name="http_clientname" optional="true"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
