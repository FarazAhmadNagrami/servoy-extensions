<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="JSPacket" qualifiedName="com.servoy.extensions.plugins.udp.JSPacket" scriptingName="JSPacket">
        <properties>
          <property clientSupport="wc,sc" name="index">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the current position in the byte array of the packet. The next read/write operation will occur at this position.
This is a 0 based index.]]></description>
            <summary><![CDATA[Returns the current position in the byte array of the packet.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="getByteArray">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Returns the content of the package into a byte array.]]></description>
            <summary><![CDATA[Returns the content of the package into a byte array.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		var bytes = packet.getByteArray();
		application.output('received a packet of length: ' + bytes.length);
		for (var i=0; i<bytes.length; i++)
			application.output(bytes[i]);
		}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="getHost">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the name of the host that sent the packet.]]></description>
            <summary><![CDATA[Returns the name of the host that sent the packet.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="getLength">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the length of the packet in bytes.]]></description>
            <summary><![CDATA[Returns the length of the packet in bytes.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="getPort">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the port where the packet originated from.]]></description>
            <summary><![CDATA[Returns the port where the packet originated from.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="readByte">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index. Advances the index with one position.]]></description>
            <summary><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="readInt">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads a 32 bits int value from the packet, starting from the current index. Advances the index with 4 positions.]]></description>
            <summary><![CDATA[Reads a 32 bits int value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="readShort">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads a 32 bits short value from the packet, starting from the current index. Advances the index with 2 positions.]]></description>
            <summary><![CDATA[Reads a 32 bits short value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="readUTF">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Reads a UTF-8 string from the packet, starting from the current index. If an argument is specified, then it represents the length (in UTF-8 encoded bytes, not characters) of the string to read. If no argument is specified, then first a 32 bits (4 byte) int is read from the packet and that will be the byte length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
            <summary><![CDATA[Reads a UTF-8 string from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function clientSupport="wc,sc" name="readUTF">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Reads a UTF-8 string from the packet, starting from the current index. If an argument is specified, then it represents the length (in UTF-8 encoded bytes, not characters) of the string to read. If no argument is specified, then first a 32 bits (4 byte) int is read from the packet and that will be the byte length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
            <summary><![CDATA[Reads a UTF-8 string from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
            <parameters>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="writeByte">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes one byte into the packet, at the current index. The index is advanced with one position.]]></description>
            <summary><![CDATA[Writes one byte into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="writeBytes">
            <argumentsTypes>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes an array of bytes into the packet, at the current index. The index is advanced with a number of positions equal to the length of the written array.]]></description>
            <summary><![CDATA[Writes an array of bytes into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="bytes" type="byte[]" typecode="[B"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="writeInt">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes a 32 bits int into the packet, at the current index. The index is advances with 4 positions.]]></description>
            <summary><![CDATA[Writes a 32 bits int into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="writeShort">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes a 16 bits short value into the packet, at the current index. The index is advances with 2 positions.]]></description>
            <summary><![CDATA[Writes a 16 bits short value into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="writeUTF">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Writes an UTF-8 encoded string into the packet, at the current index. First the length of the string is written on 4 bytes, then the string is written. The index is advanced with a number of positions equal to the length of the string plus 4.]]></description>
            <summary><![CDATA[Writes an UTF-8 encoded string into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="string" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="udp" qualifiedName="com.servoy.extensions.plugins.udp.UDPProvider" scriptingName="plugins.udp">
        <functions>
          <function clientSupport="wc,sc" name="createNewPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description><![CDATA[Create a new empty packet.]]></description>
            <summary><![CDATA[Create a new empty packet.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')//writes UTF
packet.writeInt(12348293)//writes 4 bytes
packet.writeShort(14823)//writes 2 bytes
packet.writeByte(123)//writes 1 byte]]></sample>
          </function>
          <function clientSupport="wc,sc" name="getReceivedPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></description>
            <summary><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></summary>
            <sample><![CDATA[var packet = null
while( ( packet = plugins.udp.getReceivedPacket() ) != null)
{
	var text = packet.readUTF()
	var count = packet.readInt()
}]]></sample>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getRecievedPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description/>
            <deprecated><![CDATA[Replaced by #getReceivedPacket().]]></deprecated>
            <sample/>
          </function>
          <function clientSupport="wc,sc" name="sendPacket">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Send a packet.]]></description>
            <summary><![CDATA[Send a packet.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.sendPacket('10.0.0.1',packet)]]></sample>
            <parameters>
              <parameter name="destIpOrHostname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the ip of the destination or the hostname]]></description>
              </parameter>
              <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket">
                <description><![CDATA[the JSPacket to send]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="sendPacket">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Send a packet on another port.]]></description>
            <summary><![CDATA[Send a packet on another port.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.sendPacket('10.0.0.1',packet, 4321)]]></sample>
            <parameters>
              <parameter name="destIpOrHostname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the ip of the destination or the hostname]]></description>
              </parameter>
              <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket">
                <description><![CDATA[the JSPacket to send]]></description>
              </parameter>
              <parameter name="port" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the port on which to send the packet]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="startSocket">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Start a UDP socket for a port.]]></description>
            <summary><![CDATA[Start a UDP socket for a port.]]></summary>
            <sample><![CDATA[plugins.udp.startSocket(1234,my_packet_process_method)]]></sample>
            <parameters>
              <parameter name="port_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the local port that this UDP socket will bind to.]]></description>
              </parameter>
              <parameter name="method_to_call_when_packet_received_and_buffer_is_empty" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[when the socket receives one or more packages, it calls this method once.
The method will no longer be called even if new packages are received - until a call to UDPProvider#js_getReceivedPacket() returns null. So you should
consume all available packets before you expect this method to be called again.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="stopSocket">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <description><![CDATA[Stop the UDP socket for a port.]]></description>
            <summary><![CDATA[Stop the UDP socket for a port.]]></summary>
            <sample><![CDATA[plugins.udp.stopSocket()]]></sample>
          </function>
          <function clientSupport="wc,sc" name="testPacket">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></description>
            <summary><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.testPacket(packet)]]></sample>
            <parameters>
              <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
