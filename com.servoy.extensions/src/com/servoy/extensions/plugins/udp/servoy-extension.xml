<?xml version="1.0" encoding="UTF-8"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object publicName="JSPacket" qualifiedName="com.servoy.extensions.plugins.udp.JSPacket">
        <properties>
          <property name="index">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the current position in the byte array of the packet. The next read/write operation will occur at this position.]]></description>
            <summary><![CDATA[Returns the current position in the byte array of the packet.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </property>
        </properties>
        <functions>
          <function name="getByteArray">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Returns the content of the package into a byte array.]]></description>
            <summary><![CDATA[Returns the content of the package into a byte array.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		var bytes = packet.getByteArray();
		application.output('received a packet of length: ' + bytes.length);
		for (var i=0; i<bytes.length; i++)
			application.output(bytes[i]);
		}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="getHost">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the name of the host that sent the packet.]]></description>
            <summary><![CDATA[Returns the name of the host that sent the packet.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="getLength">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the length of the packet in bytes.]]></description>
            <summary><![CDATA[Returns the length of the packet in bytes.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="getPort">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the port where the packet originated from.]]></description>
            <summary><![CDATA[Returns the port where the packet originated from.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="readByte">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index. Advances the index with one position.]]></description>
            <summary><![CDATA[Reads an 8 bits byte value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="readInt">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads a 32 bits int value from the packet, starting from the current index. Advances the index with 4 positions.]]></description>
            <summary><![CDATA[Reads a 32 bits int value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="readShort">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Reads a 32 bits short value from the packet, starting from the current index. Advances the index with 2 positions.]]></description>
            <summary><![CDATA[Reads a 32 bits short value from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('an int is: ' + packet.readInt());
		application.output('moved to index: ' + packet.index);
		application.output('a short is: ' + packet.readShort());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
		application.output('a byte is: ' + packet.readByte());
		application.output('moved to index: ' + packet.index);
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="readUTF">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Reads a UTF string from the packet, starting from the current index. If an argument is specified, then it represents the length of the string to read. If no argument is specified, then first a 32 bits int is read from the packet and that will be the length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
            <summary><![CDATA[Reads a UTF string from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
          </function>
          <function name="readUTF">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Reads a UTF string from the packet, starting from the current index. If an argument is specified, then it represents the length of the string to read. If no argument is specified, then first a 32 bits int is read from the packet and that will be the length of the string. Advances the index with a number of positions that depends on the length of the read string.]]></description>
            <summary><![CDATA[Reads a UTF string from the packet, starting from the current index.]]></summary>
            <sample><![CDATA[var packet;
while (packet = plugins.udp.getReceivedPacket()) {
	application.output('packet received from ' + packet.getHost() + ':' + packet.getPort());
	if (packet.getLength() > 0) {
		application.output('message is: ' + packet.readUTF());
	}
	else {
		application.output('end of communication.');
		break;
	}
}]]></sample>
            <parameters>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="writeByte">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes one byte into the packet, at the current index. The index is advanced with one position.]]></description>
            <summary><![CDATA[Writes one byte into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="writeBytes">
            <argumentsTypes>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes an array of bytes into the packet, at the current index. The index is advanced with a number of positions equal to the length of the written array.]]></description>
            <summary><![CDATA[Writes an array of bytes into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="bytes" type="byte[]" typecode="[B"/>
            </parameters>
          </function>
          <function name="writeInt">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes a 32 bits int into the packet, at the current index. The index is advances with 4 positions.]]></description>
            <summary><![CDATA[Writes a 32 bits int into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="writeShort">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Writes a 16 bits short value into the packet, at the current index. The index is advances with 2 positions.]]></description>
            <summary><![CDATA[Writes a 16 bits short value into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="writeUTF">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Writes an UTF encoded string into the packet, at the current index. First the length of the string is written on 4 bytes, then the string is written. The index is advanced with a number of positions equal to the length of the string plus 4.]]></description>
            <summary><![CDATA[Writes an UTF encoded string into the packet, at the current index.]]></summary>
            <sample><![CDATA[if (!plugins.udp.startSocket('5555', packetReceived)) {
	application.output('Failed to start socket.');
} else {
	var packet = plugins.udp.createNewPacket();
	packet.writeUTF('hello world!');
	plugins.udp.sendPacket('localhost', packet, 1234);
	packet = plugins.udp.createNewPacket();
	packet.writeByte(0xFF);
	packet.writeShort(10001);
	packet.writeInt(2000000001);
	plugins.udp.sendPacket('localhost', packet, 1234);
	var imgBytes = plugins.file.readFile('logo.jpg', 1024);
	packet = plugins.udp.createNewPacket();
	packet.writeBytes(imgBytes);
	plugins.udp.sendPacket('localhost', packet, 1234);
	plugins.udp.stopSocket();
}]]></sample>
            <parameters>
              <parameter name="string" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object publicName="udp" qualifiedName="com.servoy.extensions.plugins.udp.UDPProvider" scriptingName="plugins.udp">
        <functions>
          <function name="createNewPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description><![CDATA[Create a new empty packet.]]></description>
            <summary><![CDATA[Create a new empty packet.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')//writes UTF
packet.writeInt(12348293)//writes 4 bytes
packet.writeShort(14823)//writes 2 bytes
packet.writeByte(123)//writes 1 byte]]></sample>
          </function>
          <function name="getReceivedPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></description>
            <summary><![CDATA[Get a packet from receive buffer, read buffer until empty (null is returned).]]></summary>
            <sample><![CDATA[var packet = null
while( ( packet = plugins.udp.getReceivedPacket() ) != null)
{
	var text = packet.readUTF()
	var count = packet.readInt()
}]]></sample>
          </function>
          <function deprecated="true" name="getRecievedPacket">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            <description/>
            <deprecated><![CDATA[Replaced by #getReceivedPacket().]]></deprecated>
            <sample/>
          </function>
          <function name="sendPacket">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Send a packet.]]></description>
            <summary><![CDATA[Send a packet.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.sendPacket('10.0.0.1',packet)]]></sample>
            <parameters>
              <parameter name="ip/host"/>
              <parameter name="packet"/>
              <parameter name="port" optional="true"/>
            </parameters>
          </function>
          <function name="startSocket">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Start a UDP socket for a port.]]></description>
            <summary><![CDATA[Start a UDP socket for a port.]]></summary>
            <sample><![CDATA[plugins.udp.startSocket(1234,my_packet_process_method)]]></sample>
            <parameters>
              <parameter name="port_number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="method_to_call_when_packet_received_and_buffer_is_empty" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="stopSocket">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <description><![CDATA[Stop the UDP socket for a port.]]></description>
            <summary><![CDATA[Stop the UDP socket for a port.]]></summary>
            <sample><![CDATA[plugins.udp.stopSocket()]]></sample>
          </function>
          <function name="testPacket">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></description>
            <summary><![CDATA[Put a test packet in the receive buffer to test your method call and getReceivedPacket.]]></summary>
            <sample><![CDATA[var packet = plugins.udp.createNewPacket()
packet.writeUTF('hello world!')
plugins.udp.testPacket(packet)]]></sample>
            <parameters>
              <parameter name="packet" type="com.servoy.extensions.plugins.udp.JSPacket" typecode="com.servoy.extensions.plugins.udp.JSPacket"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
