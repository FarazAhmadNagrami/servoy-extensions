<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="JSClient" qualifiedName="com.servoy.extensions.plugins.headlessclient.JSClient">
        <constants>
          <constant clientSupport="wc,sc" name="CALLBACK_EVENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="CALLBACK_EXCEPTION_EVENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occurred.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occurred.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
          </constant>
        </constants>
        <functions>
          <function clientSupport="wc,sc" name="getClientID">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the id of the client.

This client id can be used to find the client from the headless client plugin.
Note that this client id is not the same id as the id displayed on the Aplicationb Server admin page.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the id of the client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var headlessClient = plugins.headlessclient.createClient("someSolution", "user", "pass", null);
var clientID = headlessClient.getClientID()
....
headlessClient = plugins.headlessclient.getClient(clientID);
if (headlessClient != null && headlessClient.isValid()) {
	 headlessClient.queueMethod(null, "someRemoteMethod", null, callback);
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value for the data-provider.]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get a data-provider value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get a data-provider value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the data-provider name as seen in Servoy]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value of the data-provider.]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get a data-provider value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get a data-provider value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method; null if it is global method or a form name for a form method.]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the data-provider name as seen in Servoy.]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[if this is specified, the data-provider's value will only be returned if the specified method is running in this headless client because the currently running client requested it to. Otherwise undefined is returned.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="isValid">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[returns true if this client is still valid/usable.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[returns true if this client is still valid/usable.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="queueMethod">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Queues a method call on the remote server. The callback method will be called when the method is executed on the server
and the return value is given as the JSEvent.data object with the JSEvent.getType() value of JSClient.CALLBACK_EVENT. 
If an exception is thrown somewhere then the callback method will be called with
the exception as the JSEvent data object with the JSEvent.getType() value of JSClient.CALLBACK_EXCEPTION_EVENT
The second argument that is give back is the JSClient instance that did the call.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Queues a method call on the remote server.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method.]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The method name.]]></description>
              </parameter>
              <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[The arguments that should be passed to the method.]]></description>
              </parameter>
              <parameter name="notifyCallBackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[The callback method that is called when the execution is finished.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change.]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set a data-provider value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set a data-provider value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method.]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the data-provider name as seen in Servoy.]]></description>
              </parameter>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the value to set.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set a data-provider value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set a data-provider value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "scopes.globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from scopes.globals.number :: "+ value);
		scopes.globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "scopes.globals.number", scopes.globals.value, 'remoteMethod');
		application.output("value set to scopes.globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from scopes.globals.number :: " + null);
	}
}]]></sample>
            </samples>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the data-provider name as seen in Servoy]]></description>
              </parameter>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the value to set]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[if this is specified, the data-provider's value will only be set if the specified method is running in this headless client because the currently running client requested it to. Otherwise the value is not set into the data-provider and undefined is returned.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="shutDown">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #shutdown(boolean)]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="shutdown">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[closes the client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[closes the client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="shutdown">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[closes the client.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[closes the client.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="force" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="headlessclient" qualifiedName="com.servoy.extensions.plugins.headlessclient.HeadlessClientProvider" scriptingName="plugins.headlessclient">
        <functions>
          <function clientSupport="wc,sc" name="createClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a headless client on the server that will open the given solution.
The clientId of this client can be stored in the database to be shared between clients so that that specific client can be used 
over multiply clients later on or picked up later on by this client. (Even after restart of this client) 

NOTE: in the developer this will only load the solution in debug mode when it is the current active solution or a module of the active solution;
you can load any solution from the workspace when you pass "nodebug" as last argument in the arguments list (it should still use the same resources project).
But then you won't be able to debug it, breakpoints won't hit.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a headless client on the server that will open the given solution.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Creates a headless client that will open the given solution.
var headlessClient = plugins.headlessclient.createClient("someSolution", "user", "pass", null);
if (headlessClient != null && headlessClient.isValid()) { 
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	headlessClient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="solutionName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="solutionOpenMethodArgs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets an existing headless client for the given client uuid.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets an existing headless client for the given client uuid.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Gets an existing headless client for the given client uuid.
var headlessClient = plugins.headlessclient.getClient("clientID");
if (headlessClient != null && headlessClient.isValid()) {
	 headlessClient.queueMethod(null, "someRemoteMethod", null, callback);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="clientID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getOrCreateClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"><![CDATA[An existing JSClient or the JSClient that is created.]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[This will try to get a existing client by the given id if that client is already created for that specific solution;
it will create a headless client on the server that will open the given solution if it didn't exists yet.

If the client does exist but it is not loaded with that solution an exception will be thrown.

NOTE: in the developer this will only load the solution in debug mode when it is the current active solution or a module of the active solution;
you can load any solution from the workspace when you pass "nodebug" as last argument in the arguments list (it should still use the same resources project).
But then you won't be able to debug it, breakpoints won't hit.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[This will try to get a existing client by the given id if that client is already created for that specific solution;
it will create a headless client on the server that will open the given solution if it didn't exists yet.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Creates a headless client that will open the given solution.
var storedSolutionSpecificID = "aaaabbbbccccc1111";
var headlessClient = plugins.headlessclient.getOrCreateClient(storedSolutionSpecificID, "someSolution", "user", "pass", null);
if (headlessClient != null && headlessClient.isValid()) { 
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	headlessClient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            </samples>
            <parameters>
              <parameter name="clientId" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The client to lookup by id, if not found a new headless client is created with this id.]]></description>
              </parameter>
              <parameter name="solutionname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The solution to load]]></description>
              </parameter>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The user name that is used to login to the solution]]></description>
              </parameter>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The password for the user]]></description>
              </parameter>
              <parameter name="solutionOpenMethodArgs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[The arguments that will be passed to the solution open method.]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
