<?xml version="1.0" encoding="UTF-8"?>
<!--This file is automatically generated. Don't bother editing it, because your changes will probably be lost at the next build.-->
<servoyextension>
  <servoydoc>
    <plugins>
      <object publicName="JSClient" qualifiedName="com.servoy.extensions.plugins.headlessclient.JSClient">
        <constants>
          <constant name="CALLBACK_EVENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></description>
            <summary><![CDATA[Constant that is returned as a JSEvent type when in the callback method when it executed normally.]]></summary>
            <sample/>
          </constant>
          <constant name="CALLBACK_EXCEPTION_EVENT">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occured.]]></description>
            <summary><![CDATA[Constant that is returned as a JSEvent type when in the callback method when an exception occured.]]></summary>
            <sample/>
          </constant>
        </constants>
        <functions>
          <function name="getClientID">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[gets the id of the client]]></description>
            <summary><![CDATA[gets the id of the client]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          </function>
          <function name="getDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value for the dataprovider]]></return>
            <description><![CDATA[Get a dataprovider value.]]></description>
            <summary><![CDATA[Get a dataprovider value.]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from globals.number :: "+ value);
		globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "globals.number", globals.value, 'remoteMethod');
		application.output("value set to globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from globals.number :: " + null);
	}
}]]></sample>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider name as seen in Servoy]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="getDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the value for the dataprovider]]></return>
            <description><![CDATA[Get a dataprovider value.]]></description>
            <summary><![CDATA[Get a dataprovider value.]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from globals.number :: "+ value);
		globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "globals.number", globals.value, 'remoteMethod');
		application.output("value set to globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from globals.number :: " + null);
	}
}]]></sample>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider name as seen in Servoy]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the methodname that should be running now for this client, if not then undefined is returned.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="isValid">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[returns true if this client is still valid/usable]]></description>
            <summary><![CDATA[returns true if this client is still valid/usable]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          </function>
          <function name="queueMethod">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[Queues a method call on the remote server. The callback method will be called when the method is executed on the server
and the return value is given as the JSEvent.data object with the JSEvent.getType() value of JSClient.CALLBACK_EVENT. 
If an exception is thrown somewhere then the callback method will be called with
the exception as the JSEvent data object with the JSEvent.getType() value of JSClient.CALLBACK_EXCEPTION_EVENT
The second argument that is give back is the JSClient instance that did the call.]]></description>
            <summary><![CDATA[Queues a method call on the remote server.]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The method name]]></description>
              </parameter>
              <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[The arguments that should be passed to the method.]]></description>
              </parameter>
              <parameter name="notifyCallBackMethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[The callback method that is called when the execution is finished.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="setDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change]]></return>
            <description><![CDATA[Set a dataprovider value.]]></description>
            <summary><![CDATA[Set a dataprovider value.]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from globals.number :: "+ value);
		globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "globals.number", globals.value, 'remoteMethod');
		application.output("value set to globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from globals.number :: " + null);
	}
}]]></sample>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider name as seen in Servoy]]></description>
              </parameter>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[to set]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="setDataProviderValue">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"><![CDATA[the old value or null if no change]]></return>
            <description><![CDATA[Set a dataprovider value.]]></description>
            <summary><![CDATA[Set a dataprovider value.]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	// only gets the globals.media when the 'remoteMethod' is currently executing for this client
	var value = jsclient.getDataProviderValue(null, "globals.number", 'remoteMethod');
	if (value != null)
	{
		application.output("value get from globals.number :: "+ value);
		globals.value = value+10;
		var returnValue = jsclient.setDataProviderValue(null, "globals.number", globals.value, 'remoteMethod');
		application.output("value set to globals.number previous value "+ returnValue);
	}
	else
	{
		application.output("value get from globals.number :: " + null);
	}
}]]></sample>
            <parameters>
              <parameter name="contextName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[The context of the given method, null if it is global method or a form name for a form method]]></description>
              </parameter>
              <parameter name="dataprovider" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider name as seen in Servoy]]></description>
              </parameter>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[to set]]></description>
              </parameter>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the methodname that should be running now for this client, if not then value wont be set and undefined is returned.]]></description>
              </parameter>
            </parameters>
          </function>
          <function deprecated="true" name="shutDown">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[closes the client]]></description>
            <summary><![CDATA[closes the client]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            <parameters>
              <parameter name="force" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function name="shutdown">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <description><![CDATA[closes the client]]></description>
            <summary><![CDATA[closes the client]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
          </function>
          <function name="shutdown">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <description><![CDATA[closes the client]]></description>
            <summary><![CDATA[closes the client]]></summary>
            <sample><![CDATA[if (jsclient && jsclient.isValid())
{
	/*Queue a method where the callback can do something like this
	if (event.getType() == JSClient.CALLBACK_EVENT)
	{
		application.output("callback data, name: " + event.data);
	}
	else if (event.getType() == JSClient.CALLBACK_EXCEPTION_EVENT)
	{
		application.output("exception callback, name: " + event.data);
	}*/
	var x = new Object();
	x.name = 'remote1';
	x.number = 10;
	// this calls a 'remoteMethod' on the server as a global method, because the context (first argument is set to null), you can use a formname to call a form method
	jsclient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            <parameters>
              <parameter name="force" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object publicName="headlessclient" qualifiedName="com.servoy.extensions.plugins.headlessclient.HeadlessClientProvider" scriptingName="plugins.headlessclient">
        <functions>
          <function name="createClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
            <description><![CDATA[Creates a headless client that will open the given solution.]]></description>
            <summary><![CDATA[Creates a headless client that will open the given solution.]]></summary>
            <sample><![CDATA[// Creates a headless client that will open the given solution.
var headlessClient = plugins.headlessclient.createClient("someSolution", "user", "pass", null);
if (headlessClient != null && headlessClient.isValid()) { 
	 var x = new Object();
	 x.name = 'remote1';
	 x.number = 10;
headlessClient.queueMethod(null, "remoteMethod", [x], callback);
}]]></sample>
            <parameters>
              <parameter name="solutionName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="username" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="password" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="solutionOpenMethodArgs" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function name="getClient">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.headlessclient.JSClient" typecode="com.servoy.extensions.plugins.headlessclient.JSClient"/>
            <description><![CDATA[Gets an existing headless client for the given client uuid.]]></description>
            <summary><![CDATA[Gets an existing headless client for the given client uuid.]]></summary>
            <sample><![CDATA[// Gets an existing headless client for the given client uuid.
var headlessClient = plugins.headlessclient.getClient("clientID");
if (headlessClient != null && headlessClient.isValid()) {
	 headlessClient.queueMethod(null, "someRemoteMethod", null, callback);
}]]></sample>
            <parameters>
              <parameter name="clientID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
