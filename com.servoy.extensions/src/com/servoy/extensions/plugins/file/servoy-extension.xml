<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object publicName="JSFile" qualifiedName="com.servoy.extensions.plugins.file.JSFile">
        <functions>
          <function name="canRead">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file exists and is readable (has access to it) - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file exists and is readable (has access to it) - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="canWrite">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file exists and can be modified - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file exists and can be modified - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="createNewFile">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Creates the file on disk if needed. Returns true if the file (name) did not already exists and had to be created - for remote, use the streamFilesToServer to stream a file.]]></description>
            <summary><![CDATA[Creates the file on disk if needed.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
if (!f.exists())
	f.createNewFile();]]></sample>
          </function>
          <function name="deleteFile">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Deletes the file from the disk if possible. Returns true if the file could be deleted. If the file is a directory, then it must be empty in order to be deleted - works on remote files too.]]></description>
            <summary><![CDATA[Deletes the file from the disk if possible.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/story.txt');
if (f && f.exists())
	f.deleteFile();]]></sample>
          </function>
          <function name="exists">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file/directory exists on the filesystem - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file/directory exists on the filesystem - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="getAbsoluteFile">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Returns a JSFile instance that corresponds to the absolute form of this pathname - works on remote files too.]]></description>
            <summary><![CDATA[Returns a JSFile instance that corresponds to the absolute form of this pathname - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
          </function>
          <function name="getAbsolutePath">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns a String representation of the absolute form of this pathname - works on remote files too.]]></description>
            <summary><![CDATA[Returns a String representation of the absolute form of this pathname - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="getBytes">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Gets the contents (bytes) for the file data.]]></description>
            <summary><![CDATA[Gets the contents (bytes) for the file data.]]></summary>
            <sample><![CDATA[var theFile = plugins.file.showFileOpenDialog();
application.output('The file size in bytes: ' + theFile.getBytes());]]></sample>
          </function>
          <function name="getContentType">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the contenttype of this file, like for example 'application/pdf' - works on remote files too.]]></description>
            <summary><![CDATA[Returns the contenttype of this file, like for example 'application/pdf' - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="getName">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the name of the file. The name consists in the last part of the file path - works on remote files too.]]></description>
            <summary><![CDATA[Returns the name of the file.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="getParent">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the String representation of the path of the parent of this file - works on remote files too.]]></description>
            <summary><![CDATA[Returns the String representation of the path of the parent of this file - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
          </function>
          <function name="getParentFile">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Returns a JSFile instance that corresponds to the parent of this file - works on remote files too.]]></description>
            <summary><![CDATA[Returns a JSFile instance that corresponds to the parent of this file - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
// or for a remote file:
// var f = plugins.file.convertToRemoteJSFile('/story.txt');
application.output('parent folder: ' + f.getAbsoluteFile().getParent());
application.output('parent folder has ' + f.getAbsoluteFile().getParentFile().listFiles().length + ' entries');]]></sample>
          </function>
          <function name="getPath">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns a String holding the path to the file - works on remote files too.]]></description>
            <summary><![CDATA[Returns a String holding the path to the file - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="isAbsolute">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the path is absolute. The path is absolute if it starts with '/' on Unix/Linux/MacOS or has a driver letter on Windows - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the path is absolute.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="isDirectory">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file is a directory - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file is a directory - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="isFile">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file is a file and not a regular file - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file is a file and not a regular file - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="isHidden">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the file is hidden (a file system attribute) - works on remote files too.]]></description>
            <summary><![CDATA[Returns true if the file is hidden (a file system attribute) - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function deprecated="true" name="js_delete">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description/>
            <deprecated><![CDATA[Replaced by #deleteFile().]]></deprecated>
            <sample/>
          </function>
          <function name="lastModified">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <description><![CDATA[Returns the time/date of the last modification on the file - works on remote files too.]]></description>
            <summary><![CDATA[Returns the time/date of the last modification on the file - works on remote files too.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
          <function name="list">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <description><![CDATA[Returns an array of strings naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></description>
            <summary><![CDATA[Returns an array of strings naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></summary>
            <sample><![CDATA[var d = plugins.file.convertToJSFile('plugins');
// or for a remote file:
// var d = plugins.convertToRemoteJSFile('/plugins');
var names = d.list();
application.output('Names:');
for (var i=0; i<names.length; i++)
	application.output(names[i]);
var files = d.listFiles();
application.output('Absolute paths:');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          </function>
          <function name="listFiles">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFiles naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></description>
            <summary><![CDATA[Returns an array of JSFiles naming the files and directories located inside the file, if the file is a directory - works on remote files too.]]></summary>
            <sample><![CDATA[var d = plugins.file.convertToJSFile('plugins');
// or for a remote file:
// var d = plugins.convertToRemoteJSFile('/plugins');
var names = d.list();
application.output('Names:');
for (var i=0; i<names.length; i++)
	application.output(names[i]);
var files = d.listFiles();
application.output('Absolute paths:');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
          </function>
          <function name="mkdir">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Creates a directory on disk if possible. Returns true if a new directory was created - for remote, use the streamFilesToServer to create the directory instead.]]></description>
            <summary><![CDATA[Creates a directory on disk if possible.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('one/two/three/four');
f.mkdirs(); // Create all four levels of folders in one step.
var g = plugins.file.convertToJSFile('one/two/three/four/five');
g.mkdir(); // This will work because all parent folders are already created.]]></sample>
          </function>
          <function name="mkdirs">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Creates a directory on disk, together with all its parent directories, if possible. Returns true if the hierarchy of directories is created - for remote, use the streamFilesToServer to create the directories instead.]]></description>
            <summary><![CDATA[Creates a directory on disk, together with all its parent directories, if possible.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('one/two/three/four');
f.mkdirs(); // Create all four levels of folders in one step.
var g = plugins.file.convertToJSFile('one/two/three/four/five');
g.mkdir(); // This will work because all parent folders are already created.]]></sample>
          </function>
          <function name="renameTo">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Renames the file to a different name. Returns true if the file could be renamed - works on remote files too.]]></description>
            <summary><![CDATA[Renames the file to a different name.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
f.renameTo('otherstory.txt');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/story.txt');
// f.renameTo('/otherstory.txt');]]></sample>
            <parameters>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="setBytes" since="5.2.5">
            <argumentsTypes>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the operation worked]]></return>
            <description><![CDATA[Set the content of the file (local or remote) to the bytes provided<br/>
Will not create a new file if one doesn't exist]]></description>
            <summary><![CDATA[Set the content of the file (local or remote) to the bytes provided<br/>
Will not create a new file if one doesn't exist]]></summary>
            <sample><![CDATA[var file = plugins.file.convertToJSFile('/pathTo/file.jpg');
// or for a remote file:
// var file = plugins.file.convertToRemoteJSFile('/remotePathTo/file.jpg');
var success = file.setBytes(blobDataProvider, true);]]></sample>
            <parameters>
              <parameter name="bytes" type="byte[]" typecode="[B">
                <description><![CDATA[the data]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="setBytes" since="5.2.5">
            <argumentsTypes>
              <argumentType typecode="[B"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if the operation worked]]></return>
            <description><![CDATA[Set the content of the file (local or remote) to the bytes provided]]></description>
            <summary><![CDATA[Set the content of the file (local or remote) to the bytes provided]]></summary>
            <sample/>
            <parameters>
              <parameter name="bytes" type="byte[]" typecode="[B">
                <description><![CDATA[the data]]></description>
              </parameter>
              <parameter name="createFile" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true to create a file if it doesn't exist]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="setLastModified">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Sets the date/time of the last modification on the file.]]></description>
            <summary><![CDATA[Sets the date/time of the last modification on the file.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
f.createNewFile();
// Make the file look old.
f.setLastModified(new Date(1999, 5, 21));]]></sample>
            <parameters>
              <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="setReadOnly">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Sets the readonly attribute of the file/directory. Returns true on success.]]></description>
            <summary><![CDATA[Sets the readonly attribute of the file/directory.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('invoice.txt');
plugins.file.writeTXTFile(f, 'important data that should not be changed');
f.setReadOnly();]]></sample>
          </function>
          <function name="size">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the size in bytes of the file. Returns 0 if the file does not exist on disk - works on remote files too.]]></description>
            <summary><![CDATA[Returns the size in bytes of the file.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('./big.jpg');
// or for a remote file:
// var f = plugins.convertToRemoteJSFile('/images/big.jpg');
if (f && f.exists()) {
	application.output('is absolute: ' + f.isAbsolute());
	application.output('is dir: ' + f.isDirectory());
	application.output('is file: ' + f.isFile());
	application.output('is hidden: ' + f.isHidden());
	application.output('can read: ' + f.canRead());
	application.output('can write: ' + f.canWrite());
	application.output('last modified: ' + f.lastModified());
	application.output('name: ' + f.getName());
	application.output('path: ' + f.getPath());
	application.output('absolute path: ' + f.getAbsolutePath());
	application.output('content type: ' + f.getContentType());
	application.output('size: ' + f.size());
}
else {
	application.output('File/folder not found.');
}]]></sample>
          </function>
        </functions>
      </object>
      <object publicName="JSProgressMonitor" qualifiedName="com.servoy.extensions.plugins.file.JSProgressMonitor">
        <functions>
          <function name="cancel">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Cancels the transfer process.]]></description>
            <summary><![CDATA[Cancels the transfer process.]]></summary>
            <sample><![CDATA[monitor.cancel();]]></sample>
          </function>
          <function name="getCurrentBytesToTransfer">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the number of bytes to transfer for the current file.]]></description>
            <summary><![CDATA[Returns the number of bytes to transfer for the current file.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getCurrentFileIndex">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the index of the current file being transferred.]]></description>
            <summary><![CDATA[Returns the index of the current file being transferred.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getCurrentTransferredBytes">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the number of bytes already transferred for the current file.]]></description>
            <summary><![CDATA[Returns the number of bytes already transferred for the current file.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getCurrentTransferredFileName">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Returns the name of the current file being transferred.]]></description>
            <summary><![CDATA[Returns the name of the current file being transferred.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getTotalBytesToTransfer">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the total bytes to transfer to or from the server (sum of all the files size)]]></description>
            <summary><![CDATA[Returns the total bytes to transfer to or from the server (sum of all the files size)]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getTotalFilesToTransfer">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Returns the total number of files to transfer.]]></description>
            <summary><![CDATA[Returns the total number of files to transfer.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="getTotalTransferredBytes">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the total bytes already transferred (for all files)]]></description>
            <summary><![CDATA[Returns the total bytes already transferred (for all files)]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="isCanceled">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the process was canceled.]]></description>
            <summary><![CDATA[Returns true if the process was canceled.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="isFinished">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Returns true if the process is finished.]]></description>
            <summary><![CDATA[Returns true if the process is finished.]]></summary>
            <sample><![CDATA[application.output('total transferred: ' + monitor.getTotalTransferredBytes() + ' / ' + monitor.getTotalBytesToTransfer());
application.output('current file: ' + monitor.getCurrentTransferredFileName() + ' ( ' + monitor.getCurrentFileIndex() + ' / ' + monitor.getTotalFilesToTransfer() + ' )');
application.output('current bytes transferred: '+monitor.getCurrentTransferredBytes() + ' / ' + monitor.getCurrentBytesToTransfer());
if (monitor.isCanceled()) {
	application.output('canceled!')
}
if (monitor.isFinished()) {
	application.output('finished!')
}]]></sample>
          </function>
          <function name="setProgressCallBack">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="float"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[this for chaining]]></return>
            <description><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values. Can use an optional delay (for testing purpose in developer).]]></description>
            <summary><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values.]]></summary>
            <sample><![CDATA[// call the progressCallbackFuntion every 2 and a half seconds (with a delay of 200ms in developer):
monitor.setProgressCallBack(progressCallbackFunction, 2.5, (application.isInDeveloper() ? 200 : 0));]]></sample>
            <parameters>
              <parameter name="function" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the Function to call back at the specified interval]]></description>
              </parameter>
              <parameter name="interval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
                <description><![CDATA[the interval (in seconds) to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="setProgressCallBack">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="float"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[this for chaining]]></return>
            <description><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values. Can use an optional delay (for testing purpose in developer).]]></description>
            <summary><![CDATA[Sets a method to be called repeatedly at the given interval (in seconds), the method will receive an instance of this JSProgressMonitor updated with the latest values.]]></summary>
            <sample><![CDATA[// call the progressCallbackFuntion every 2 and a half seconds (with a delay of 200ms in developer):
monitor.setProgressCallBack(progressCallbackFunction, 2.5, (application.isInDeveloper() ? 200 : 0));]]></sample>
            <parameters>
              <parameter name="function" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the Function to call back at the specified interval]]></description>
              </parameter>
              <parameter name="interval" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="float">
                <description><![CDATA[the interval (in seconds) to use]]></description>
              </parameter>
              <parameter name="delay" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[adds a delay for testing purpose in Developer]]></description>
              </parameter>
            </parameters>
          </function>
        </functions>
      </object>
      <object publicName="file" qualifiedName="com.servoy.extensions.plugins.file.FileProvider" scriptingName="plugins.file">
        <constants>
          <constant name="CHUNK_BUFFER_SIZE" since="Servoy 5.2">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <description><![CDATA[Size of the buffer used to stream files to the server]]></description>
            <summary><![CDATA[Size of the buffer used to stream files to the server]]></summary>
            <sample/>
          </constant>
        </constants>
        <functions>
          <function name="appendToTXTFile" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if appending worked]]></return>
            <description><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></description>
            <summary><![CDATA[Appends a string given in parameter to a file, using default platform encoding.]]></summary>
            <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[either a File, a local JSFile or a the file path as a String]]></description>
              </parameter>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text to append to the file]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="appendToTXTFile" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[true if appending worked]]></return>
            <description><![CDATA[Appends a string given in parameter to a file, using the specified encoding.]]></description>
            <summary><![CDATA[Appends a string given in parameter to a file, using the specified encoding.]]></summary>
            <sample><![CDATA[// append some text to a text file:
	var ok = plugins.file.appendToTXTFile('myTextFile.txt', '\nMy fantastic new line of text\n');]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[either a File, a local JSFile or a the file path as a String]]></description>
              </parameter>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text to append to the file]]></description>
              </parameter>
              <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the encoding to use]]></description>
              </parameter>
            </parameters>
          </function>
          <function deprecated="true" name="convertStringToJSFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[returns a JSFile for the given string]]></description>
            <summary><![CDATA[returns a JSFile for the given string]]></summary>
            <deprecated><![CDATA[Replaced by #convertToJSFile(Object).]]></deprecated>
            <sample/>
            <parameters>
              <parameter name="fileName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function name="convertToJSFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"><![CDATA[JSFile]]></return>
            <description><![CDATA[Returns a JSFile instance corresponding to an alternative representation of a file (for example a string).]]></description>
            <summary><![CDATA[Returns a JSFile instance corresponding to an alternative representation of a file (for example a string).]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile("story.txt");
if (f.canRead())
	application.output("File can be read.");]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="convertToRemoteJSFile" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"><![CDATA[the JSFile]]></return>
            <description><![CDATA[Convenience return to get a JSFile representation of a server file based on its path.]]></description>
            <summary><![CDATA[Convenience return to get a JSFile representation of a server file based on its path.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToRemoteJSFile('/story.txt');
if (f && f.canRead())
	application.output('File can be read.');]]></sample>
            <parameters>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the path representing a file on the server (should start with "/")]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="copyFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Copies the source file to the destination file. Returns true if the copy succeeds, false if any error occurs.]]></description>
            <summary><![CDATA[Copies the source file to the destination file.]]></summary>
            <sample><![CDATA[// Copy based on file names.
if (!plugins.file.copyFile("story.txt", "story.txt.copy"))
	application.output("Copy failed.");
// Copy based on JSFile instances.
var f = plugins.file.createFile("story.txt");
var fcopy = plugins.file.createFile("story.txt.copy2");
if (!plugins.file.copyFile(f, fcopy))
	application.output("Copy failed.");]]></sample>
            <parameters>
              <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="copyFolder">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[success boolean]]></return>
            <description><![CDATA[Copies the sourcefolder to the destination folder, recursively. Returns true if the copy succeeds, false if any error occurs.]]></description>
            <summary><![CDATA[Copies the sourcefolder to the destination folder, recursively.]]></summary>
            <sample><![CDATA[// Copy folder based on names.
if (!plugins.file.copyFolder("stories", "stories_copy"))
	application.output("Folder copy failed.");
// Copy folder based on JSFile instances.
var d = plugins.file.createFile("stories");
var dcopy = plugins.file.createFile("stories_copy_2");
if (!plugins.file.copyFolder(d, dcopy))
	application.output("Folder copy failed.");]]></sample>
            <parameters>
              <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="createFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Creates a JSFile instance. Does not create the file on disk.]]></description>
            <summary><![CDATA[Creates a JSFile instance.]]></summary>
            <sample><![CDATA[// Create the JSFile instance based on the file name.
var f = plugins.file.createFile("newfile.txt");
// Create the file on disk.
if (!f.createNewFile())
	application.output("The file could not be created.");]]></sample>
            <parameters>
              <parameter name="targetFile" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="createFolder">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Creates a folder on disk. Returns true if the folder is successfully created, false if any error occurs.]]></description>
            <summary><![CDATA[Creates a folder on disk.]]></summary>
            <sample><![CDATA[var d = plugins.file.convertToJSFile("newfolder");
if (!plugins.file.createFolder(d))
	application.output("Folder could not be created.");]]></sample>
            <parameters>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="createTempFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Creates a temporary file on disk. A prefix and an extension are specified and they will be part of the file name.]]></description>
            <summary><![CDATA[Creates a temporary file on disk.]]></summary>
            <sample><![CDATA[var tempFile = plugins.file.createTempFile('myfile','.txt');
application.output('Temporary file created as: ' + tempFile.getAbsolutePath());
plugins.file.writeTXTFile(tempFile, 'abcdefg');]]></sample>
            <parameters>
              <parameter name="prefix" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="suffix" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function name="deleteFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Removes a file from disk. Returns true on success, false otherwise.]]></description>
            <summary><![CDATA[Removes a file from disk.]]></summary>
            <sample><![CDATA[if (plugins.file.deleteFile('story.txt'))
	application.output('File deleted.');]]></sample>
            <parameters>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="deleteFolder">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Deletes a folder from disk recursively. Returns true on success, false otherwise. If the second parameter is set to true, then a warning will be issued to the user before actually removing the folder.]]></description>
            <summary><![CDATA[Deletes a folder from disk recursively.]]></summary>
            <sample><![CDATA[if (plugins.file.deleteFolder('stories', true))
	application.output('Folder deleted.');]]></sample>
            <parameters>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="showWarning" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function name="getDefaultUploadLocation">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"><![CDATA[the location as canonical path]]></return>
            <description><![CDATA[Returns the default upload location path of the server.]]></description>
            <summary><![CDATA[Returns the default upload location path of the server.]]></summary>
            <sample><![CDATA[// get the (server-side) default upload location path:
var serverPath = plugins.file.getDefaultUploadLocation();]]></sample>
          </function>
          <function name="getDesktopFolder">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Returns a JSFile instance that corresponds to the Desktop folder of the currently logged in user.]]></description>
            <summary><![CDATA[Returns a JSFile instance that corresponds to the Desktop folder of the currently logged in user.]]></summary>
            <sample><![CDATA[var d = plugins.file.getDesktopFolder();
application.output('desktop folder is: ' + d.getAbsolutePath());]]></sample>
          </function>
          <function name="getDiskList">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an Array of JSFile instances correponding to the file system root folders.]]></description>
            <summary><![CDATA[Returns an Array of JSFile instances correponding to the file system root folders.]]></summary>
            <sample><![CDATA[var roots = plugins.file.getDiskList();
for (var i = 0; i < roots.length; i++)
	application.output(roots[i].getAbsolutePath());]]></sample>
          </function>
          <function name="getFileSize">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long"/>
            <description><![CDATA[Returns the size of the specified file.]]></description>
            <summary><![CDATA[Returns the size of the specified file.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
application.output('file size: ' + plugins.file.getFileSize(f));]]></sample>
            <parameters>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="getFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
            <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path object.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="getFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
            <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path object.]]></description>
              </parameter>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Filter or array of filters for files in folder.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="getFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
            <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path object.]]></description>
              </parameter>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Filter or array of filters for files in folder.]]></description>
              </parameter>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=files, 2=dirs]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="getFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
            <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path object.]]></description>
              </parameter>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Filter or array of filters for files in folder.]]></description>
              </parameter>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=files, 2=dirs]]></description>
              </parameter>
              <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=visible, 2=nonvisible]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="getFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"/>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder.]]></summary>
            <sample><![CDATA[var files = plugins.file.getFolderContents('stories', '.txt');
for (var i=0; i<files.length; i++)
	application.output(files[i].getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path object.]]></description>
              </parameter>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Filter or array of filters for files in folder.]]></description>
              </parameter>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=files, 2=dirs]]></description>
              </parameter>
              <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=visible, 2=nonvisible]]></description>
              </parameter>
              <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[1=locked, 2=nonlocked]]></description>
              </parameter>
            </parameters>
          </function>
          <function deprecated="true" name="getHomeDirectory">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description/>
            <deprecated><![CDATA[Replaced by #getHomeFolder().]]></deprecated>
            <sample/>
          </function>
          <function name="getHomeFolder">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Returns a JSFile instance corresponding to the home folder of the logged in used.]]></description>
            <summary><![CDATA[Returns a JSFile instance corresponding to the home folder of the logged in used.]]></summary>
            <sample><![CDATA[var d = plugins.file.getHomeFolder();
application.output('home folder: ' + d.getAbsolutePath());]]></sample>
          </function>
          <function name="getModificationDate">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <description><![CDATA[Returns the modification date of a file.]]></description>
            <summary><![CDATA[Returns the modification date of a file.]]></summary>
            <sample><![CDATA[var f = plugins.file.convertToJSFile('story.txt');
application.output('last changed: ' + plugins.file.getModificationDate(f));]]></sample>
            <parameters>
              <parameter name="path" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="getRemoteFolderContents" since="Servoy 5.2.1">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
            <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="getRemoteFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
            <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="getRemoteFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
            <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="getRemoteFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
            <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function name="getRemoteFolderContents">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side. The content can be filtered by optional name filter(s), by type, by visibility and by lock status.]]></description>
            <summary><![CDATA[Returns an array of JSFile instances corresponding to content of the specified folder on the server side.]]></summary>
            <sample><![CDATA[// retrieves an array of files located on the server side inside the default upload folder:
var files = plugins.file.getRemoteFolderContents('/', '.txt');]]></sample>
            <parameters>
              <parameter name="targetFolder" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileFilter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="fileOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="visibleOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="lockedOption" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function deprecated="true" name="getRemoteList" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Retrieves an array of files/folders from the server]]></description>
            <summary><![CDATA[Retrieves an array of files/folders from the server]]></summary>
            <deprecated><![CDATA[Replaced by #getRemoteFolderContents(Object[]).]]></deprecated>
            <sample/>
            <parameters>
              <parameter name="serverPath" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the path of a remote directory (relative to the defaultFolder)]]></description>
              </parameter>
            </parameters>
          </function>
          <function deprecated="true" name="getRemoteList" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile[]" typecode="[Lcom.servoy.extensions.plugins.file.JSFile;"><![CDATA[the array of file names]]></return>
            <description><![CDATA[Retrieves an array of files/folders from the server]]></description>
            <summary><![CDATA[Retrieves an array of files/folders from the server]]></summary>
            <deprecated><![CDATA[Replaced by #getRemoteFolderContents(Object[]).]]></deprecated>
            <sample/>
            <parameters>
              <parameter name="serverPath" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[a JSFile or String with the path of a remote directory (relative to the defaultFolder)]]></description>
              </parameter>
              <parameter name="filesOnly" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[if true only files will be retrieve, if false, files and folders will be retrieved]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="moveFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Moves the file from the source to the destination place. Returns true on success, false otherwise.]]></description>
            <summary><![CDATA[Moves the file from the source to the destination place.]]></summary>
            <sample><![CDATA[// Move file based on names.
if (!plugins.file.moveFile('story.txt','story.txt.new'))
	application.output('File move failed.');
// Move file based on JSFile instances.
var f = plugins.file.convertToJSFile('story.txt.new');
var fmoved = plugins.file.convertToJSFile('story.txt');
if (!plugins.file.moveFile(f, fmoved))
	application.output('File move back failed.');]]></sample>
            <parameters>
              <parameter name="source" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="destination" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="readFile">
            <argumentsTypes/>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
            <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
          </function>
          <function name="readFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
            <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="readFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="long"/>
            </argumentsTypes>
            <return type="byte[]" typecode="[B"/>
            <description><![CDATA[Reads all or part of the content from a binary file. If a file name is not specified, then a file selection dialog pops up for selecting a file. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Reads all or part of the content from a binary file.]]></summary>
            <sample><![CDATA[// Read all content from the file.
var bytes = plugins.file.readFile('big.jpg');
application.output('file size: ' + bytes.length);
// Read only the first 1KB from the file.
var bytesPartial = plugins.file.readFile('big.jpg', 1024);
application.output('partial file size: ' + bytesPartial.length);
// Read all content from a file selected from the file open dialog.
var bytesUnknownFile = plugins.file.readFile();
application.output('unknown file size: ' + bytesUnknownFile.length);]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
              <parameter name="size" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="long">
                <description><![CDATA[Number of bytes to read.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="readTXTFile">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Read all content from a text file.]]></summary>
            <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
          </function>
          <function name="readTXTFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Read all content from a text file.]]></summary>
            <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="readTXTFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <description><![CDATA[Read all content from a text file. If a file name is not specified, then a file selection dialog pops up for selecting a file. The encoding can be also specified. (Web Enabled only for a JSFile argument)]]></description>
            <summary><![CDATA[Read all content from a text file.]]></summary>
            <sample><![CDATA[// Read content from a known text file.
var txt = plugins.file.readTXTFile('story.txt');
application.output(txt);
// Read content from a text file selected from the file open dialog.
var txtUnknown = plugins.file.readTXTFile();
application.output(txtUnknown);]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
              <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Charset name.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showDirectorySelectDialog">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a directory selector dialog.]]></description>
            <summary><![CDATA[Shows a directory selector dialog.]]></summary>
            <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
          </function>
          <function name="showDirectorySelectDialog">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a directory selector dialog.]]></description>
            <summary><![CDATA[Shows a directory selector dialog.]]></summary>
            <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="directory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Default directory.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showDirectorySelectDialog">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a directory selector dialog.]]></description>
            <summary><![CDATA[Shows a directory selector dialog.]]></summary>
            <sample><![CDATA[var dir = plugins.file.showDirectorySelectDialog();
application.output("you've selected folder: " + dir.getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="directory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[Default directory.]]></description>
              </parameter>
              <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Dialog title.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[null=default/previous]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path to default folder,null=default/previous]]></description>
              </parameter>
              <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true/false]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path to default folder,null=default/previous]]></description>
              </parameter>
              <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true/false]]></description>
              </parameter>
              <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path to default folder,null=default/previous]]></description>
              </parameter>
              <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true/false]]></description>
              </parameter>
              <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[A filter or array of filters on the folder files.]]></description>
              </parameter>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[null=default/previous]]></description>
              </parameter>
              <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true/false]]></description>
              </parameter>
              <parameter name="filter" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[A filter or array of filters on the folder files.]]></description>
              </parameter>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path to default folder,null=default/previous]]></description>
              </parameter>
              <parameter name="multiselect" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true/false]]></description>
              </parameter>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="startDirectory" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File or path to default folder,null=default/previous]]></description>
              </parameter>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="selectionMode" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[0=both,1=Files,2=Dirs]]></description>
              </parameter>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function name="showFileOpenDialog">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <description><![CDATA[Shows a file open dialog. Filters can be applied on what type of files can be selected. (Web Enabled, you must set the callback method for this to work)]]></description>
            <summary><![CDATA[Shows a file open dialog.]]></summary>
            <sample><![CDATA[// This selects only files ('1'), previous dir must be used ('null'), no multiselect ('false') and
// the filter "JPG and GIF" should be used: ('new Array("JPG and GIF","jpg","gif")').
/** @type {JSFile} */
var f = plugins.file.showFileOpenDialog(1, null, false, new Array("JPG and GIF", "jpg", "gif"));
application.output('File: ' + f.getName());
application.output('is dir: ' + f.isDirectory());
application.output('is file: ' + f.isFile());
application.output('path: ' + f.getAbsolutePath());

// This allows mutliple selection of files, using previous dir and the same filter as above. This also casts the result to the JSFile type using JSDoc.
// if filters are specified, "all file" filter will not show up unless "*" filter is present
/** @type {JSFile[]} */
var files = plugins.file.showFileOpenDialog(1, null, true, new Array("JPG and GIF", "jpg", "gif", "*"));
for (var i = 0; i < files.length; i++)
{
	 application.output('File: ' + files[i].getName());
	 application.output('content type: ' + files[i].getContentType());
	 application.output('last modified: ' + files[i].lastModified());
	 application.output('size: ' + files[i].size());
}
//for the web you have to give a callback function that has a JSFile array as its first argument (also works in smart), only multi select and the title are used in the webclient, others are ignored
plugins.file.showFileOpenDialog(null,null,false,myCallbackMethod,'Select some nice files')]]></sample>
            <parameters>
              <parameter name="callbackmethod" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function name="showFileSaveDialog">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a file save dialog.]]></description>
            <summary><![CDATA[Shows a file save dialog.]]></summary>
            <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
          </function>
          <function name="showFileSaveDialog">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a file save dialog.]]></description>
            <summary><![CDATA[Shows a file save dialog.]]></summary>
            <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="fileNameDir" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[File to save.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="showFileSaveDialog">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSFile" typecode="com.servoy.extensions.plugins.file.JSFile"/>
            <description><![CDATA[Shows a file save dialog.]]></description>
            <summary><![CDATA[Shows a file save dialog.]]></summary>
            <sample><![CDATA[var file = plugins.file.showFileSaveDialog();
application.output("you've selected file: " + file.getAbsolutePath());]]></sample>
            <parameters>
              <parameter name="fileNameDir" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="title" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Dialog title.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="streamFilesFromServer" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
            <description><![CDATA[Stream 1 or more file from the server to the client.]]></description>
            <summary><![CDATA[Stream 1 or more file from the server to the client.]]></summary>
            <sample><![CDATA[// transfer all the files of a chosen server folder to a directory on the client
var dir = plugins.file.showDirectorySelectDialog();
if (dir) {
	var list = plugins.file.getRemoteFolderContents('/images/user1/', null, 1);
	if (list) {
		var monitor = plugins.file.streamFilesFromServer(dir, list, callbackFunction);
	}
}]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[file(s) to be streamed into (can be a String path, a File or a JSFile) or an Array of these]]></description>
              </parameter>
              <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[of the files on the server that will be transfered to the client, can be a String or a String[]]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="streamFilesFromServer" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
            <description><![CDATA[Stream 1 or more files from the server to the client, the callback method is invoked after every file, with as argument
the filename that was transfered. An extra second exception parameter can be given if an exception did occur.]]></description>
            <summary><![CDATA[Stream 1 or more files from the server to the client, the callback method is invoked after every file, with as argument
the filename that was transfered.]]></summary>
            <sample><![CDATA[// transfer all the files of a chosen server folder to a directory on the client
var dir = plugins.file.showDirectorySelectDialog();
if (dir) {
	var list = plugins.file.getRemoteFolderContents('/images/user1/', null, 1);
	if (list) {
		var monitor = plugins.file.streamFilesFromServer(dir, list, callbackFunction);
	}
}]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[file(s) to be streamed into (can be a String path, a File or a JSFile) or an Array of these]]></description>
              </parameter>
              <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the files on the server that will be transfered to the client, can be a JSFile or JSFile[], a String or String[]]]></description>
              </parameter>
              <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the Function to be called back at the end of the process (after every file)]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="streamFilesToServer" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
            <description><![CDATA[Overloaded method, only defines file(s) to be streamed]]></description>
            <summary><![CDATA[Overloaded method, only defines file(s) to be streamed]]></summary>
            <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[file(s) to be streamed (can be a String path, a File or a JSFile) or an Array of these]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="streamFilesToServer" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
            <description><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></description>
            <summary><![CDATA[Overloaded method, defines file(s) to be streamed and a callback function]]></summary>
            <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[file(s) to be streamed (can be a String path, a File or a JSFile) or an Array of these]]></description>
              </parameter>
              <parameter name="o" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[can be a JSFile or JSFile[], a String or String[] or the Function to be called back at the end of the process]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="streamFilesToServer" since="Servoy 5.2">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.file.JSProgressMonitor" typecode="com.servoy.extensions.plugins.file.JSProgressMonitor"><![CDATA[a JSProgressMonitor object to allow client to subscribe to progress notifications]]></return>
            <description><![CDATA[Overloaded method, defines file(s) to be streamed, a callback function and file name(s) to use on the server]]></description>
            <summary><![CDATA[Overloaded method, defines file(s) to be streamed, a callback function and file name(s) to use on the server]]></summary>
            <sample><![CDATA[// send one file:
var file = plugins.file.showFileOpenDialog( 1, null, false, null, null, 'Choose a file to transfer' );
if (file) {
	plugins.file.streamFilesToServer( file, callbackFunction );
}
// send an array of files:
var folder = plugins.file.showDirectorySelectDialog();
if (folder) {
	var files = plugins.file.getFolderContents(folder);
	if (files) {
		var monitor = plugins.file.streamFilesToServer( files, callbackFunction );
	}
}]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[file(s) to be streamed (can be a String path, a File or a JSFile) or an Array of these]]></description>
              </parameter>
              <parameter name="s" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[can be a JSFile or JSFile[], a String or String[]]]></description>
              </parameter>
              <parameter name="callback" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the Function to be called back at the end of the process]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="writeFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="[B"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Writes data into a binary file. (Web Enabled: file parameter can be a string 'mypdffile.pdf' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into a binary file.]]></summary>
            <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="data" type="byte[]" typecode="[B"/>
            </parameters>
          </function>
          <function name="writeFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="[B"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Writes data into a binary file. (Web Enabled: file parameter can be a string 'mypdffile.pdf' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into a binary file.]]></summary>
            <sample><![CDATA[/**@type {Array<byte>}*/
var bytes = new Array();
for (var i=0; i<1024; i++)
	bytes[i] = i % 100;
var f = plugins.file.convertToJSFile('bin.dat');
if (!plugins.file.writeFile(f, bytes))
	application.output('Failed to write the file.');
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp'
var mimeType = 'application/vnd.ms-excel'
if (!plugins.file.writeFile(f, bytes, mimeType))
	application.output('Failed to write the file.');]]></sample>
            <parameters>
              <parameter name="f" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="data" type="byte[]" typecode="[B"/>
              <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function name="writeTXTFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
            <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into a text file.]]></summary>
            <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
              <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Text to be written.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="writeTXTFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
            <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into a text file.]]></summary>
            <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
              <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Text to be written.]]></description>
              </parameter>
              <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Charset name.]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="writeTXTFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"><![CDATA[Success boolean.]]></return>
            <description><![CDATA[Writes data into a text file. (Web Enabled: file parameter can be a string 'mytextfile.txt' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into a text file.]]></summary>
            <sample><![CDATA[var fileNameSuggestion = 'myspecialexport.tab'
var textData = 'load of data...'
var success = plugins.file.writeTXTFile(fileNameSuggestion, textData);
if (!success) application.output('Could not write file.');
// For file-encoding parameter options (default OS encoding is used), http://download.oracle.com/javase/1.4.2/docs/guide/intl/encoding.doc.html
// mimeType variable can be left null, and is used for webclient only. Specify one of any valid mime types as referenced here: http://www.w3schools.com/media/media_mimeref.asp']]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[JSFile or path.]]></description>
              </parameter>
              <parameter name="text_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Text to be written.]]></description>
              </parameter>
              <parameter name="charsetname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Charset name.]]></description>
              </parameter>
              <parameter name="mimeType" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[Content type (used only on web).]]></description>
              </parameter>
            </parameters>
          </function>
          <function name="writeXMLFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into an XML file.]]></summary>
            <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function name="writeXMLFile">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <description><![CDATA[Writes data into an XML file. The file is saved with the encoding specified by the XML itself. (Web Enabled: file parameter can be a string 'myxmlfile.xml' to hint the browser what it is, if it is a JSFile instance it will be saved on the server)]]></description>
            <summary><![CDATA[Writes data into an XML file.]]></summary>
            <sample><![CDATA[var fileName = 'form.xml'
var xml = controller.printXML()
var success = plugins.file.writeXMLFile(fileName, xml);
if (!success) application.output('Could not write file.');]]></sample>
            <parameters>
              <parameter name="file" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="xml_data" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="encoding" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
