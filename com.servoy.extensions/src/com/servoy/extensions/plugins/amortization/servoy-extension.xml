<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="AmortizationCalculation" qualifiedName="com.servoy.extensions.plugins.amortization.AmortizationCalculation">
        <constants>
          <constant clientSupport="wc,sc" name="NUMBER_UNLIMITED">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify an unlimited number of repeated events.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify an unlimited number of repeated events.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_ANNUALY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify an annual period.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify an annual period.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_BI_ANNUALLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a bi-annual period (twice every year).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a bi-annual period (twice every year).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_BI_MONTHLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a bi-monthly period (twice every month).
TODO: this period is not supported yet.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a bi-monthly period (twice every month).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_DAILY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a daily period.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a daily period.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_FOUR_MONTHLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a four-monthly period (once every four months).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a four-monthly period (once every four months).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_FOUR_WEEKLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a four-weekly period (once every four weeks).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a four-weekly period (once every four weeks).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_MONTHLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a monthly period.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a monthly period.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_NONE">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify that there is no period.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify that there is no period.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_QUARTERLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a quarterly period (once every three months).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a quarterly period (once every three months).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_TWO_MONTHLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a two-monthly period (once every two months).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a two-monthly period (once every two months).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_TWO_WEEKLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a two-weekly period (once every two weeks).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a two-weekly period (once every two weeks).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="PERIOD_WEEKLY">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a weekly period.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify a weekly period.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="STARTDAY_NORMAL">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The numeric constant used to identify that the same start day should be used as
the day of the month of the starting date of the event.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The numeric constant used to identify that the same start day should be used as
the day of the month of the starting date of the event.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addPayment(500, new Date(2005, 1, 28), null, 
			plugins.amortization.AmortizationCalculation.PERIOD_DAILY, 5, 
			plugins.amortization.AmortizationCalculation.STARTDAY_NORMAL);

var c2 = plugins.amortization.newCalculation();
c2.addPayment(300, new Date(2006, 11, 24), new Date(2006, 12, 24),
			plugins.amortization.AmortizationCalculation.PERIOD_BI_MONTHLY, 
			plugins.amortization.AmortizationCalculation.NUMBER_UNLIMITED, 30);]]></sample>
            </samples>
          </constant>
        </constants>
        <functions>
          <function clientSupport="wc,sc" name="addCompoundPeriodChange">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.util.Date"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a compound period change.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a compound period change.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="newPeriod" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addLoan">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a loan.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a loan.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addLoan">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a loan.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a loan.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addLoan">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a loan.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a loan.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addLoan">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a loan.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a loan.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addPayment">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a payment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a payment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addPayment">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a payment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a payment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addPayment">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a payment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a payment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addPayment">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a payment.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a payment.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="firstDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="lastDate" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="number" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRateChange">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="java.util.Date"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets a new interest rate.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets a new interest rate.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);]]></sample>
            </samples>
            <parameters>
              <parameter name="newRate" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="calculateAmortizationSchedule">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Calculates the amortization schedule.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Calculates the amortization schedule.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.calculateAmortizationSchedule();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getAmortizationSchedule">
            <argumentsTypes/>
            <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the amortization schedule as a JSDataSet.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the amortization schedule as a JSDataSet.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.getAmortizationSchedule();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getError">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the error that remains when solving for the unknown.
Please note that the error should be less or equal to 1E-8 - otherwise, the solveForUnknown value is incorrect.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the error that remains when solving for the unknown.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var c = plugins.amortization.newCalculation();
// sets the rate to -1 for unknown.
c.addRateChange(-1, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
var lastDate = null;
var period = 12;
var number_count = 5;
var startday = 31;
c.addPayment(500, new Date(2005, 1, 28), lastDate, period,number_count, startday);
// solves for the interest rate.
c.solveForUnknown();
// gets the interest rate and the error in the calculation.
// which should be small (otherwise the calculation did
// not converge for some reason.
var r = c.getUnknown();
var e = c.getError();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getEvents">
            <argumentsTypes/>
            <return type="com.servoy.j2db.dataprocessing.JSDataSet" typecode="com.servoy.j2db.dataprocessing.IDataSet"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns all the amortization events - such as rate changes, loan events, payment events, compounding period changes.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns all the amortization events - such as rate changes, loan events, payment events, compounding period changes.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.getEvents();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getRestBalance">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the rest balance after the amortization schedule.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the rest balance after the amortization schedule.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var rb = plugins.amortization.getRestBalance();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getUnknown">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the solveForUnknown value.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the solveForUnknown value.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.getUnknown();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="isValidPeriod">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns true if the period is valid, or false if the period is not valid.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns true if the period is valid, or false if the period is not valid.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var v_period = plugins.amortization.isValidPeriod(12);]]></sample>
            </samples>
            <parameters>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="roundMoney">
            <argumentsTypes>
              <argumentType typecode="double"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Rounds a number up to the nearest cents.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Rounds a number up to the nearest cents.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//rounds the number up to 34.35
var rm = plugins.amortization.roundMoney(34.349384);]]></sample>
            </samples>
            <parameters>
              <parameter name="amount" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="solveForUnknown">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns true if successful or false if the call failed.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns true if successful or false if the call failed.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.solveForUnknown();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="sortEvents">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sorts the amortization events ascending by date.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sorts the amortization events ascending by date.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[plugins.amortization.sortEvents();]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="Polynomial" qualifiedName="com.servoy.extensions.plugins.amortization.Polynomial" scriptingName="Polynomial">
        <functions>
          <function clientSupport="wc,sc" name="addPolynomial">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds another polynomial to this polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds another polynomial to this polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
            </samples>
            <parameters>
              <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addTerm">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Adds a term to this polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Adds a term to this polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
            </samples>
            <parameters>
              <parameter name="coefficient" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="exponent" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="findRoot">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="double"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Finds a root of this polynomial using Newton's method, starting from an initial search value, and with a given precision.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Finds a root of this polynomial using Newton's method, starting from an initial search value, and with a given precision.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
            </samples>
            <parameters>
              <parameter name="startValue" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="error" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="iterations" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getDerivative">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns a polynomial that holds the derivative of this polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns a polynomial that holds the derivative of this polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getDerivativeValue">
            <argumentsTypes>
              <argumentType typecode="double"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the value of the derivative of this polynomial in a certain point.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the value of the derivative of this polynomial in a certain point.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
            </samples>
            <parameters>
              <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getValue">
            <argumentsTypes>
              <argumentType typecode="double"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Returns the value of this polynomial in a certain point.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Returns the value of this polynomial in a certain point.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Model the quadratic equation -x^2 + 4x + 0.6 = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(-1, 2);
eq.addTerm(4, 1);
eq.addTerm(0.6, 0);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));
// Find the minimum/maximum point by zeroing the first derivative.
var deriv = eq.getDerivative();
rd = deriv.findRoot(0, 1E-5, 1000);
application.output("Min/max point: " + rd);
application.output("Min/max value: " + eq.getValue(rd));
if (deriv.getDerivativeValue(rd) < 0) application.output("Max point.");
else application.output("Min point.");]]></sample>
            </samples>
            <parameters>
              <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="multiplyByPolynomial">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Multiplies this polynomial with another polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Multiplies this polynomial with another polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Model the quadratic equation (x+1)*(x+2) = 0
var eq = plugins.amortization.newPolynomial();
eq.addTerm(1, 1);
eq.addTerm(1, 0);
var eq2 = plugins.amortization.newPolynomial();
eq2.addTerm(1, 1);
eq2.addTerm(2, 0);
eq.multiplyByPolynomial(eq2);
// Find the roots of the equation.
r1 = eq.findRoot(100, 1E-5, 1000);
r2 = eq.findRoot(-100, 1E-5, 1000);
application.output("eq(" + r1 + ")=" + eq.getValue(r1));
application.output("eq(" + r2 + ")=" + eq.getValue(r2));]]></sample>
            </samples>
            <parameters>
              <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="multiplyByTerm">
            <argumentsTypes>
              <argumentType typecode="double"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Multiples this polynomial with a term.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Multiples this polynomial with a term.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// (x+1) + 2*(x+1)*x + 3*(x+1)*x^2 + 4*(x+1)*x^3
var eq = plugins.amortization.newPolynomial();
for (var i = 0; i < 4; i++)
{
	var base = plugins.amortization.newPolynomial();
	base.addTerm(1, 1);
	base.addTerm(1, 0);
	base.multiplyByTerm(1, i);
	base.multiplyByTerm(i + 1, 0);
	eq.addPolynomial(base);
}
application.output(eq.getValue(2));]]></sample>
            </samples>
            <parameters>
              <parameter name="coefficient" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="double"/>
              <parameter name="exponent" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setToZero">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets this polynomial to zero.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets this polynomial to zero.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[var eq = plugins.amortization.newPolynomial();
eq.addTerm(2, 3);
application.output(eq.getValue(1.1));
eq.setToZero();
application.output(eq.getValue(1.1));]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="amortization" qualifiedName="com.servoy.extensions.plugins.amortization.AmortizationProvider" scriptingName="plugins.amortization">
        <functions>
          <function clientSupport="wc,sc" name="newCalculation">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.amortization.AmortizationCalculation" typecode="com.servoy.extensions.plugins.amortization.AmortizationCalculation"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new amortization calculation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new amortization calculation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Calculate the interest rate for an amortization schedule
// with a loan of 2000 dollars  on January 1, 2005, and 5
// monthly payments of 500 dollars starting on Febuary 28th,
// payments made on the last day of each month.

// Get a new amortization calculation.
var c = plugins.amortization.newCalculation();

// Set the rate to -1 for unknown.
c.addRateChange(-1, new Date(2005, 0, 1));

// Set the compounding period to monthly.
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));

// Add the loan and the payments to the schedule.
c.addLoan(2000, new Date(2005, 0, 1));
var lastDate = null;
var period = 12;
//valid periods are:
//PERIOD_ANNUALY : 1
//PERIOD_BI_ANNUALLY : 2
//PERIOD_DAILY : 365
//PERIOD_FOUR_MONTHLY : 3
//PERIOD_FOUR_WEEKLY : 13
//PERIOD_MONTHLY : 12
//PERIOD_QUARTERLY : 4
//PERIOD_TWO_MONTHLY : 6
//PERIOD_TWO_WEEKLY : 26
//PERIOD_WEEKLY : 52
var number_count = 5;
var startday = 31;
c.addPayment(500, new Date(2005, 1, 28), lastDate, period, number_count, startday);

// Solve for the interest rate.
c.solveForUnknown();
// Get the interest rate and the error in the calculation.
// which should be small (otherwise the calculation did
// not converge for some reason.
var r = c.getUnknown();
var e = c.getError();

// When there are no unknowns you can calculate the
// actual amortization schedule.

// Same as before, use the calculated interest rate.
var c = plugins.amortization.newCalculation();
c.addRateChange(r, new Date(2005, 0, 1));
c.addCompoundPeriodChange(12, new Date(2005, 0, 1));
c.addLoan(2000, new Date(2005, 0, 1));
c.addPayment(500, new Date(2005, 1, 28), null, 12, 5, 31);

// Calculate the actual amortization schedule.
c.calculateAmortizationSchedule();

// Get the amortization schedule (which is a JSDataSet) and
// convert it to html. This way you can put it on a label.
// As a JSDataSet you can just get the values stored in
// the rows and columns to use in your script.
var s = "<html>" + c.getAmortizationSchedule().getAsHTML();

// Get the rest balance, which is the amount left over after
// the amortization schedule. In our case (since we calculated
// the rate to have nothing left, it should amount to no more
// than 1 or 2 cents due to rounding).
var rb = c.getRestBalance();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="newPolynomial">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new polynomial
var p = plugins.amortization.newPolynomial();

// make the polynomial -4*x^2 + 9
p.addTerm(-4, 2); // -4*x^2
p.addTerm(9, 0); // 9

// find the roots
var r1 = p.findRoot(1, 5E-15, 100);
var r2 = p.findRoot(-1, 5E-15, 100);

// get the derivative
q = p.getDerivative();

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"derivative: " + q + "\n" +
	"value in 2: " + p.getValue(2) + "\n" +
	"derivative in 2: " + p.getDerivativeValue(2) + "\n" +
	"root near 1: " + r1 + "\n" +
	"root near -1: " + r2,
	"Ok"
);

// set q to zero
q.setToZero();

// make a copy of p, then add 1 and multiply by 3*x^2
var s = plugins.amortization.newPolynomial(p);
s.addTerm(1, 0); // add 1
s.multiplyByTerm(3, 2); // mulitply by 3*x^2

// make a copy of s and add p
var t = plugins.amortization.newPolynomial(s);
t.addPolynomial(p);

// make a copy of s and multiply by p
var u = plugins.amortization.newPolynomial(s);
u.multiplyByPolynomial(p);

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"polynomial: " + s + "\n" +
	"sum: " + t + "\n" +
	"sum in 2: " + p.getValue(2) + " + " + s.getValue(2) + " = " + t.getValue(2) + "\n" +
	"product: " + u + "\n" +
	"product in 2: " + p.getValue(2) + " * " + s.getValue(2) + " = " + u.getValue(2) + "\n",
	"Ok"
);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="newPolynomial">
            <argumentsTypes>
              <argumentType typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new polynomial which is either 0 or a copy of the specified polynomial.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new polynomial
var p = plugins.amortization.newPolynomial();

// make the polynomial -4*x^2 + 9
p.addTerm(-4, 2); // -4*x^2
p.addTerm(9, 0); // 9

// find the roots
var r1 = p.findRoot(1, 5E-15, 100);
var r2 = p.findRoot(-1, 5E-15, 100);

// get the derivative
q = p.getDerivative();

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"derivative: " + q + "\n" +
	"value in 2: " + p.getValue(2) + "\n" +
	"derivative in 2: " + p.getDerivativeValue(2) + "\n" +
	"root near 1: " + r1 + "\n" +
	"root near -1: " + r2,
	"Ok"
);

// set q to zero
q.setToZero();

// make a copy of p, then add 1 and multiply by 3*x^2
var s = plugins.amortization.newPolynomial(p);
s.addTerm(1, 0); // add 1
s.multiplyByTerm(3, 2); // mulitply by 3*x^2

// make a copy of s and add p
var t = plugins.amortization.newPolynomial(s);
t.addPolynomial(p);

// make a copy of s and multiply by p
var u = plugins.amortization.newPolynomial(s);
u.multiplyByPolynomial(p);

// show all this information in a dialog
plugins.dialogs.showInfoDialog(
	"polynomial",
	"polynomial: " + p + "\n" +
	"polynomial: " + s + "\n" +
	"sum: " + t + "\n" +
	"sum in 2: " + p.getValue(2) + " + " + s.getValue(2) + " = " + t.getValue(2) + "\n" +
	"product: " + u + "\n" +
	"product in 2: " + p.getValue(2) + " * " + s.getValue(2) + " = " + u.getValue(2) + "\n",
	"Ok"
);]]></sample>
            </samples>
            <parameters>
              <parameter name="polynomial" type="com.servoy.extensions.plugins.amortization.Polynomial" typecode="com.servoy.extensions.plugins.amortization.Polynomial"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="nextDate">
            <argumentsTypes>
              <argumentType typecode="java.util.Date"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[//Helper method to get the next date when a period is given;
//valid periods are:
//PERIOD_ANNUALY : 1
//PERIOD_BI_ANNUALLY : 2
//PERIOD_BI_MONTHLY : 365
//PERIOD_FOUR_MONTHLY : 3
//PERIOD_FOUR_WEEKLY : 13
//PERIOD_MONTHLY : 12
//PERIOD_QUARTERLY : 4
//PERIOD_TWO_MONTHLY : 6
//PERIOD_TWO_WEEKLY : 26
//PERIOD_WEEKLY : 52
var a_next_date = plugins.amortization.nextDate(new Date(2005, 1, 28),12,31);

//Sample to calculate intervals between 2 dates;
var startday = 31;
var d_start = new Date(2005, 1, 28)
var d_end = new Date(2005, 11, 20)
var allDates = new Array();
var next = d_start;
//loop over months
while (next.getTime() < d_end.getTime())
{
	next = plugins.amortization.nextDate(next,12,startday)
	allDates[allDates.length] = next;
}
if (allDates.length > 0) allDates.length = allDates.length-1 //clear was one to far
//now check how many days are left
if (allDates.length > 0)
{
	next = allDates[allDates.length-1]
}
else
{
	next = d_start;
}
var days = 0;
//loop over days
while (next.getTime() < d_end.getTime() || next.getDate() < d_end.getDate())
{
	next = plugins.amortization.nextDate(next,365,startday)
	days++;
}
//add total days
allDates[allDates.length] = '(and) '+days+' days'
//make array textual to show
application.output( allDates.join('\n') );]]></sample>
            </samples>
            <parameters>
              <parameter name="start_date" type="com.servoy.j2db.documentation.scripting.docs.Date" typecode="java.util.Date"/>
              <parameter name="period" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="startday" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
