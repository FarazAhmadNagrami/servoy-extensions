<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<servoyextension>
  <servoydoc>
    <plugins>
      <object clientSupport="wc,sc" publicName="CheckBox" qualifiedName="com.servoy.extensions.plugins.window.menu.CheckBox">
        <properties>
          <property clientSupport="wc,sc" name="enabled">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="methodArguments">
            <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="name">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="selected">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="text">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="doClick">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function) and #setSelected(boolean).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the checkbox]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the checkbox]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the checkbox]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the checkbox]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setSelected(boolean), #setIcon(Object), #setAccelerator(String), #setMnemonic(Function), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the checkbox]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[feedback method]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for marking as selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments to the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the checkbox]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true if this item is visible, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setAccelerator">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setAlign">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the alignment of the checkbox.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the alignment of the checkbox.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a checkbox
var entry = menu.addCheckBox("menu entry", feedback);
// alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// enable alignment of the new entry
entry.setAlign(true);]]></sample>
            </samples>
            <parameters>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setArguments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setBackgroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setForegroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setIcon">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMnemonic">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the item visible.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the item visible.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" deprecated="true" publicName="JSMenuItem" qualifiedName="com.servoy.extensions.plugins.window.menu.JSMenuItem">
        <constants>
          <constant clientSupport="wc,sc" name="ALIGN_CENTER">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="ALIGN_LEFT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="ALIGN_RIGHT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
        </constants>
        <properties>
          <property clientSupport="wc,sc" name="enabled">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="methodArguments">
            <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="name">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="selected">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="text">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="doClick">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setAccelerator">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setArguments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setBackgroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setForegroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setIcon">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMnemonic">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the item visible.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the item visible.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="Menu" qualifiedName="com.servoy.extensions.plugins.window.menu.Menu">
        <properties>
          <property clientSupport="wc,sc" name="text">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Retrieve/set the text.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Retrieve/set the text.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the checkbox]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the checkbox]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the checkbox]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <deprecated><![CDATA[Replaced by #addMenuItem(String,Function,Object,String,Boolean,Integer).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the submenu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the submenu; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the menu item]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the menu item]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the menu item]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radio button.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radio button.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the radio button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radio button with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radio button with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of radio button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of radio button]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioGroup">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiogroup for radiobuttons. A radiogroup groups together all radiobuttons that are added
after the group is added. From all radiobuttons that belong to the same radiogroup only one can be
checked at a time.

If no radiogroup is added, one is created automatically when the first radiobutton is added.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiogroup for radiobuttons.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addSeparator">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addSeparator">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the index at which to add the separator]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addSubMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #addMenu(String).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addSubMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #addMenu(Number).]]></deprecated>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the index at which to add the submenu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="doClick">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// retrieve the File menu
var menubar = plugins.window.getMenuBar();
var menu = menubar.getMenu(0);
// simulate a click on the File menu
menu.doClick();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getCheckBox">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the checkbox at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the checkbox at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getItem">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.AbstractMenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the item at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the item at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getItemCount">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the number of items in the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the number of items in the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// REMARK: indexes start at 0, disabled items, non visible items and seperators are counted also
// REMARK: this is especially important when getting items by the index
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// remove the last item
menu.removeItem(menu.getItemCount() - 1);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getItemIndexByText">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the submenu at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the submenu at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getRadioButton">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getSubMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #getMenu().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeAllItems">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove all items from the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove all items from the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="removeItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove the item(s) at the selected index/indices.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove the item(s) at the selected index/indices.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[array of one or moe indexes corresponding to items to remove]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean) and #setMnemonic(String).]]></deprecated>
            <parameters>
              <parameter name="obj" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the text of the menu or a menu object]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String) and #setMnemonic(String).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic for this menu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setEnabled(boolean) and #setMnemonic(String).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic for this menu]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setEnabled">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the the selected menu enabled or disabled.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the the selected menu enabled or disabled.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setIcon">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the icon of the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the icon of the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setMnemonic">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the mnemonic of the selected menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the mnemonic of the selected menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the menu's text
menu.text = "New Menu";
// disable the menu
menu.setEnabled(false);
// set a mnemonic
menu.setMnemonic("u");
// add an icon to the menu
menu.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="MenuBar" qualifiedName="com.servoy.extensions.plugins.window.menu.MenuBar">
        <functions>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu to the menubar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu to the menubar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addMenu only works in the smart client.

// when you don't define an index the menu will be added at the last
// positon of the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the text of the menu
menu.text = "add menu";
// set the mnemonic key
menu.setMnemonic("a");
// add another menu at a specific position in the menubar
var another_menu = menubar.addMenu(2);
another_menu.text = "another menu";
another_menu.setMnemonic("t")
// REMARK: normally you would add menu items, checkboxes etc in the same method
// this example will show no menu items for now!
// IMPORTANT: Working with menu's on developer and client can differ]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu to the menubar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu to the menubar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addMenu only works in the smart client.

// when you don't define an index the menu will be added at the last
// positon of the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
// set the text of the menu
menu.text = "add menu";
// set the mnemonic key
menu.setMnemonic("a");
// add another menu at a specific position in the menubar
var another_menu = menubar.addMenu(2);
another_menu.text = "another menu";
another_menu.setMnemonic("t")
// REMARK: normally you would add menu items, checkboxes etc in the same method
// this example will show no menu items for now!
// IMPORTANT: Working with menu's on developer and client can differ]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the menu at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the menu at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getMenu only works in the smart client.

var menubar = plugins.window.getMenuBar();
// get the menu at index 2
// indexes start at 0 (zero) so index 2 is in fact position 3
var menu = menubar.getMenu(2);
// set the text of the menu at the chose position
menu.text = "get menu";
// set the mnemonic key
menu.setMnemonic("g");
// disable the menu
menu.setEnabled(false);
// REMARK: we actually changed an original menu! As a result resetting the
// menubar will NOT reset the above changes. We need to reset the menu 
// manually the following way:
// get the menu
//var menu = menubar.getMenu(2);
// reset the values to default
// notice we use an i18n message here the same way you would use it with
// standard Servoy methods and plugins
//menu.text = "i18n:servoy.menuitem.showAll";
//menu.setEnabled(true);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getMenuCount">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the number of (top level) menu's.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the number of (top level) menu's.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getMenuCount only works in the smart client.

// add a new menu before the last menu
var menubar = plugins.window.getMenuBar();
var count = menubar.getMenuCount();
var menu = menubar.addMenu(count-1);
menu.text = 'new menu';]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getMenuIndexByText">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getMenuIndexByText only works in the smart client.

var menubar = plugins.window.getMenuBar();
// find the index of the View menu
var idx = menubar.getMenuIndexByText("View");
// add a menu before the View menu
var menu = menubar.addMenu(idx);
menu.text = "new menu";]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeAllMenus">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove all menus from the menubar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove all menus from the menubar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method removeAllMenus only works in the smart client.

// Potentially dangerous because all accelerator (short) keys
// will be deleted also (including the quit item)
var menubar = plugins.window.getMenuBar();
menubar.removeAllMenus();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="removeMenu">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove the menu(s) at the selected index/indices.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove the menu(s) at the selected index/indices.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method removeMenu only works in the smart client.

var menubar = plugins.window.getMenuBar();
// To remove the last menu in the menubar we count the number of menu's in the menubar
// because the index starts at 0 we have to substract 1 from the counted menu's
// to actually remove the last menu from the menubar
var index = menubar.getMenuCount() - 1;
menubar.removeMenu(index);

// To remove the last 3 (three) menu's from the menubar we
// can do that by adding additional indexes to the method
// and delimit them with a comma.
index = menubar.getMenuCount() - 1;
menubar.removeMenu(index, index-1, index-2);
 
// For 'security' reasons it is best to ALWAYS remove the menu with the last index
// first to avoid index out of range issues and other issues
// EXAMPLE: when you first remove the menu at index 2 and then the menu at index 4
// you actually remove the menu at index 2 and index 5
// after removing the menu at index 2 all other menu's moved one index to the left
// so the menu at index 4 moved to index 3 and the menu at index 5 moved to index 4 etc.]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[array of one or more indexes corresponding to menus to remove]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="reset">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Reset the menubar to the default.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Reset the menubar to the default.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method removeMenu only works in the smart client.

// When the menubar settings are solution specific it is advised to reset
// the bar to its default settings when closing the solution.
// Another reason is that when a client/developer is started first the
// plugin will save the current settings in memory.
// REMARK: Don't manipulate standard Servoy menuitems but remove
// them and create new ones! Due to the way menuitems are managed by java it is not
// possible to reset a menuitem anymore.
var menubar = plugins.window.getMenuBar();
// add a menu
var menu = menubar.addMenu();
menu.text = "new menu";
// reset the menubar, the newly added menu will dissapear
menubar.reset();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show/hide the menu bar]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show/hide the menu bar]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method setVisible only works in the smart client.

// hide the menu bar
var menubar = plugins.window.getMenuBar();
menubar.setVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="validate">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Obsolete method, no longer needed.]]></deprecated>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="MenuItem" qualifiedName="com.servoy.extensions.plugins.window.menu.MenuItem">
        <constants>
          <constant clientSupport="wc,sc" name="ALIGN_CENTER">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for centering menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="ALIGN_LEFT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for left aligning menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
          <constant clientSupport="wc,sc" name="ALIGN_RIGHT">
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Constant for right aligning menu items/checkbox/radiobuttons at creation.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a left aligned menu item
menu.addMenuItem("significantly long text", feedback, null, null, true, MenuItem.ALIGN_LEFT);
// add a centered checkbox
menu.addCheckBox("a bit shorter", feedback, null, null, true, MenuItem.ALIGN_CENTER);
// add a right aligned radiobutton
menu.addRadioButton("short", feedback, null, null, true, MenuItem.ALIGN_RIGHT);]]></sample>
            </samples>
          </constant>
        </constants>
        <properties>
          <property clientSupport="wc,sc" name="enabled">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="methodArguments">
            <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="name">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="selected">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="text">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="doClick">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setAccelerator">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setArguments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setBackgroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setForegroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setIcon">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMnemonic">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the item visible.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the item visible.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="Popup" qualifiedName="com.servoy.extensions.plugins.window.menu.Popup">
        <functions>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the checkbox]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the checkbox]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"><![CDATA[checkbox]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a checkbox at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the checkbox will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method 
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addCheckBox("checkbox", feedback_checkbox);
// add a checkbox with an icon
menu.addCheckBox("checkbox with icon", feedback_checkbox, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addCheckBox("checkbox with icon", feedback_checkbox, pic_bytes);
// add a checkbox with a mnemonic
menu.addCheckBox("checkbox with mnemonic", feedback_checkbox, "media:///yourimage.gif", "c");
// add a disabled checkbox
menu.addCheckBox("checkbox disabled", feedback_checkbox, "media:///yourimage.gif", "d", false);
// add a checkbox with text aligned to the right
menu.addCheckBox("align right", feedback_checkbox, null, null, true, MenuItem.ALIGN_RIGHT);

// add a checkbox at a given index (checkbox properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var chk = menu.addCheckBox(2);
chk.text = "checkbox at index";
chk.setMethod(feedback_checkbox);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the checkbox icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the checkbox mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the checkbox]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <deprecated><![CDATA[Replaced by #addMenuItem(String,Function,Object,String,Boolean,Integer).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the submenu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"><![CDATA[the submenu]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a submenu with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a submenu with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a first submenu
var submenu1 = menu.addMenu("submenu 1");
submenu1.addMenuItem("sub item 1 - 1", feedback_item);
// add a submenu as child of the first submenu
var submenu1_2 = submenu1.addMenu("submenu 1 - 2");
submenu1_2.addMenuItem("sub item 1 - 2 - 1", feedback_item);
// add another submenu as a child of the first submenu
var submenu1_3 = submenu1.addMenu("submenu 1 - 3");
submenu1_3.addMenuItem("sub item 1 - 3 - 1", feedback_item);
// add a submenu to the second submenu of the first submenu
var submenu1_3_2 = submenu1_2.addMenu("submenu 1 - 2 - 2");
submenu1_3_2.addMenuItem("sub item 1 - 2 - 2 - 1", feedback_item);
// add a submenu directly to the menu, at the first position
var submenu0 = menu.addMenu(0);
submenu0.text = "submenu 0";
submenu0.addMenuItem("sub item 0 - 1", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the submenu; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the menu item]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the menu item]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addMenuItem">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"><![CDATA[menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a menu item at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// when you don't define an index the item will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addMenuItem("item", feedback_item);
// add an item with an icon
menu.addMenuItem("item with icon", feedback_item, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addMenuItem("item with icon", feedback_item, pic_bytes);
// add an item with a mnemonic
menu.addMenuItem("item with mnemonic", feedback_item, "media:///yourimage.gif", "i");
// add a disabled item
menu.addMenuItem("disabled item", feedback_item, "media:///yourimage.gif", "d", false);
// add an item with text aligned to the right
menu.addMenuItem("align right", feedback_item, null, null, true, SM_ALIGNMENT.RIGHT);

// add an item at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var item = menu.addMenuItem(2);
item.text = "item at index";
item.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the menu item icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the menu item mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of the menu item]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radio button.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radio button.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the index at which to add the radio button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radio button with given name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radio button with given name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of radio button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.Boolean"/>
              <argumentType typecode="java.lang.Number"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"><![CDATA[a radio button menu item]]></return>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiobutton at the selected index (starting at 0) or at the end.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button text; this can be also html if enclosed between html tags]]></description>
              </parameter>
              <parameter name="feedback_item" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback function]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the radio button icon (can be an image URL or the image content byte array)]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the radio button mnemonic]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="java.lang.Boolean">
                <description><![CDATA[the enabled state of radio button]]></description>
              </parameter>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="java.lang.Number">
                <description><![CDATA[the alignment type]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addRadioGroup">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a radiogroup for radiobuttons. A radiogroup groups together all radiobuttons that are added
after the group is added. From all radiobuttons that belong to the same radiogroup only one can be
checked at a time.

If no radiogroup is added, one is created automatically when the first radiobutton is added.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a radiogroup for radiobuttons.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();
	
// when you don't define an index the radiobutton will be added at the last position
// this is what you usually do to build a new menu
// minimum settings are the text and method
// the method can be a global or form method
// be sure to enter the method WITHOUT '()' at the end
menu.addRadioButton("radio", feedback_radiobutton);
// add a radiobutton with an icon
menu.addRadioButton("radio with icon", feedback_radiobutton, "media:///yourimage.gif");
//var pic_bytes = plugins.file.readFile("/path/to/image.jpg");
//menu.addRadioButton("radio with icon", feedback_radiobutton, pic_bytes);
	
// add a new radiobutton group
// a group will 'bind' all added radiobuttons after the group together
// as a result checking one item will uncheck the other
// if no group is added, a group is created automatically when the first radiobutton is added to the menu
// so in this case we will have two groups, one with the radiobuttons added until now and one with the ones added from now on
menu.addRadioGroup();
	
// add a radiobutton with a mnemonic
menu.addRadioButton("radio with mnemonic", feedback_radiobutton, "media:///yourimage.gif", "i");
// add a disabled radiobutton
menu.addRadioButton("disabled radio", feedback_radiobutton, "media:///yourimage.gif", "d", false);
// add a radiobutton with text aligned to the right
menu.addRadioButton("align right", feedback_radiobutton, null, null, true, SM_ALIGNMENT.RIGHT);
// add a radiobutton at a given index (item properties must be configured after creation)
// indexes start at 0 (zero) so index 2 is in fact position 3
var rd = menu.addRadioButton(2);
rd.text = "radio at index";
rd.setMethod(feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addSeparator">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="addSeparator">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add the separator at the selected index (starting at 0) or at the end (empty).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item and a checkbox
menu.addMenuItem("item", feedback_item);
menu.addCheckBox("checkbox", feedback_checkbox);
// add a separator
menu.addSeparator();
// add a radiobutton. it will be separated from the rest of the control by the separator
menu.addRadioButton("radio", feedback_radiobutton);
// add another separator between the item and the checkbox 
menu.addSeparator(1);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the index at which to add the separator]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addSubMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #addMenu(String).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addSubMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #addMenu(Number).]]></deprecated>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the index at which to add the submenu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getCheckBox">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the checkbox at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the checkbox at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the element based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getItem">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.AbstractMenuItem"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the item at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the item at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getItemCount">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the number of items in the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the number of items in the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// REMARK: indexes start at 0, disabled items, non visible items and seperators are counted also
// REMARK: this is especially important when getting items by the index
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// remove the last item
menu.removeItem(menu.getItemCount() - 1);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getItemIndexByText">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Retrieve the index of the item by text.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the submenu at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the submenu at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getRadioButton">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the radiobutton at the selected index (starting at 0).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a menu item, with a separator before it
menu.addSeparator();
menu.addMenuItem("item", feedback_item);
// add a checkbox, with a separator before it
menu.addSeparator();
menu.addCheckBox("check", feedback_checkbox);
// add a submenu with an item under it
var submenu = menu.addMenu("submenu");
submenu.addMenuItem("subitem", feedback_item);

// depending on some state, update the entries in the menu
var some_state = true;
if (some_state) {
	// select the first radiobutton
	menu.getRadioButton(0).selected = true;
} else {
	// select the first radiobutton
	menu.getRadioButton(1).selected = true;
}
// enable/disable the menu item
// remember to include the separators also when counting the index
menu.getItem(3).enabled = !some_state;
// select/unselect the checkbox
// remember to include the separators also when counting the index
menu.getCheckBox(5).selected = some_state;
// change the text of the submenu and its item
application.output(menu.getItemCount());
if (some_state) {
	menu.getMenu(6).text = "some state";
	menu.getMenu(6).getItem(0).text = "some text";
}
else {
	menu.getMenu(6).text = "not some state";
	menu.getMenu(6).getItem(0).text = "other text";
}]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getSubMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by #getMenu().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified element client property key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: Depending on the operating system, a user interface property name may be available.
// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add an item to the menu
menu.addMenuItem("item", feedback_item);

// set the tooltip of the menu via client properties
// keep the original tooltip in a form or global variable
originalTooltip = menu.getClientProperty("ToolTipText");
menu.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menu = menubar.getMenu(menubar.getMenuCount()-1);
//menu.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeAllItems">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove all items from the menu.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove all items from the menu.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="removeItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove the item(s) at the selected index/indices.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove the item(s) at the selected index/indices.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add two radiobuttons
menu.addRadioButton("radio one", feedback_radiobutton);
menu.addRadioButton("radio two", feedback_radiobutton);
// add a checkbox
menu.addCheckBox("check", feedback_checkbox);
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

// find the index of the checkbox
var idx = menu.getItemIndexByText("check");
// remove the checkbox by its index
menu.removeItem(idx);
// remove both radiobuttons by their indices
menu.removeItem([0, 1]);
// remove all remaining entries
menu.removeAllItems();
// add back an item
menu.addMenuItem("new item", feedback_item);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[array of one or moe indexes corresponding to items to remove]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="show">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show the popup at the mouse coordinates (Smart client only).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show the popup at the mouse coordinates (Smart client only).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="show">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSEvent"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show the popup based on JSEvent information. This can be used to show popup in tableview header that is styled with labelfor label.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show the popup based on JSEvent information.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
            </samples>
            <parameters>
              <parameter name="x"/>
              <parameter name="y"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="show">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show the popup above the specified element.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show the popup above the specified element.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
            </samples>
            <parameters>
              <parameter name="component" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="show">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show the popup above the specified element, adding x an y values relative to the element.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show the popup above the specified element, adding x an y values relative to the element.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
            </samples>
            <parameters>
              <parameter name="component" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent"/>
              <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="show">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show the popup at x an y coordinates.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show the popup at x an y coordinates.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// NOTE: usually this code is placed in a handler of an event (e.g. right click on some component)
// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("item", feedback_item);
// add another menu item
menu.addMenuItem("item 2", feedback_item);

if (event.getSource())
{
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}

// in Smart client, you can also use show with no parameters, it will show at the mouse coordinates:
//menu.show();]]></sample>
            </samples>
            <parameters>
              <parameter name="x" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="y" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="RadioButton" qualifiedName="com.servoy.extensions.plugins.window.menu.RadioButton">
        <properties>
          <property clientSupport="wc,sc" name="enabled">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Enable/disable the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="methodArguments">
            <return type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set arguments that are sent to the callback method.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="name">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton. The name is used only internally, it is not
visible in the user interface.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[The name of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="selected">
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Select/unselect the checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
          <property clientSupport="wc,sc" name="text">
            <return type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.; This can be also html if enclosed between html tags]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get/set the text of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
          </property>
        </properties>
        <functions>
          <function clientSupport="wc,sc" name="doClick">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Script the selection (emulate a mouse click) of the item.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// simulate a click on the entry
entry.doClick();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Gets the specified client property for the menu item/checkbox/radiobutton based on a key.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="putClientProperty">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the value for the specified client property key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// NOTE: Depending on the operating system, a user interface property name may be available.
// set the tooltip of the menu item/checkbox/radiobutton via client properties
// keep the original tooltip in a form or global variable
originalTooltip = entry.getClientProperty("ToolTipText");
entry.putClientProperty("ToolTipText", "changed tooltip");

// later restore the original tooltip from the variable
//var menubar = plugins.window.getMenuBar();
//var menuIndex = menubar.getMenuIndexByText("New Menu");
//var menu = menubar.getMenu(menuIndex);
//var entry = menu.getItem(0);
//entry.putClientProperty("ToolTipText", originalTooltip);]]></sample>
            </samples>
            <parameters>
              <parameter name="key" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="value" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (text,function,selected...).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the button]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the button]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic for this button]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the button]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic for this button]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by individual sets for each property (setText(String),setFunction(Function),setSelected(boolean)...).]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the button]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the button]]></description>
              </parameter>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for selected, false otherwise]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the feedback method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the icon for the button]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the accelerator key binding]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic for this button]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for enabled, false otherwise]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[true for visible, false otherwise]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the  menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="set">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setText(String), #setMethod(Function), #setMethod(Function,Object[]), #setMethodArguments(Object[]), #setIcon(Object), #setAccelerator(String), #setMnemonic(String), #setEnabled(boolean), #setVisible(boolean)]]></deprecated>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the text of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the feedback method for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the arguments for the method]]></description>
              </parameter>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the image of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="accelerator" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[an accelerator (key binding) for the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="mnemonic" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the mnemonic of the menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the enabled state of this menu item/checkbox/radiobutton]]></description>
              </parameter>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean">
                <description><![CDATA[the visibility of the menu item/checkbox/radiobutton]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setAccelerator">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the accelerator key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setAlign">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Sets the alignment of the radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Sets the alignment of the radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a checkbox
var entry = menu.addCheckBox("menu entry", feedback);
// alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// enable alignment of the new entry
entry.setAlign(true);]]></sample>
            </samples>
            <parameters>
              <parameter name="align" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setArguments">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setMethodArguments(Object[])]]></deprecated>
            <parameters>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[the method arguments for the feedback method of this menu item/checkbox/radiobutton.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setBackgroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the background color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setForegroundColor">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the foreground color of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setIcon">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the icon of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMethod">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the method for the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item at the first position in the menu
var entry = menu.addMenuItem(0);
// alternatively add a checkbox at the first position
//var entry = menu.addCheckBox(0);
// or alternatively add a radiobutton at the first position
//var entry = menu.addRadioButton(0);

// disable the newly added entry
entry.enabled = false;
// give a name to the entry (the name is not visible anywhere)
entry.name = "my_name";
// make the entry selected (affects checkboxes and radiobuttons)
entry.selected = true;
// set the text of the entry
entry.text = "menu entry";
// set the callback method
entry.setMethod(feedback);
// set the arguments to be sent to the callback method
// (an array of elements which will be passed as arguments 5, 6 and so on to the callback method)
// the first 5 arguments are fixed: 
//	[0] item index
//	[1] parent item index
//	[2] isSelected boolean
//	[3] parent menu text
//	[4] menu text
entry.methodArguments = [17, "data"];]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setMnemonic">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the mnemonic key of the menu item/checkbox/radiobutton.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry = menu.addMenuItem("menu entry", feedback);
// alternatively add a checkbox
//var entry = menu.addCheckBox("menu entry", feedback);
// or alternatively add a radiobutton
//var entry = menu.addRadioButton("menu entry", feedback);

// define an accelerator for the menu entry
entry.setAccelerator("ctrl alt Y");
// also define a mnemonic
entry.setMnemonic("y");
// set a custom background color
entry.setBackgroundColor("#111111");
// set a custom foreground color
entry.setForegroundColor("#EE5555");
// set an icon
entry.setIcon("media:///yourimage.gif");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="setVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the item visible.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the item visible.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a new menu to the menubar
var menubar = plugins.window.getMenuBar();
var menu = menubar.addMenu();
menu.text = "New Menu";
// alternatively create a popup menu
//var menu = plugins.window.createPopupMenu();

// add a menu item
var entry_one = menu.addMenuItem("an entry", feedback);
// add a checkbox
var entry_two = menu.addCheckBox("another entry", feedback);
// add a radiobutton
var entry_three = menu.addRadioButton("yet another entry", feedback);

// hide the menu item
entry_one.setVisible(false);
// make sure the checkbox is visible
entry_two.setVisible(true);
// hide the radiobutton
entry_three.setVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="ToolBar" qualifiedName="com.servoy.extensions.plugins.window.menu.swing.ToolBar">
        <functions>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addButton">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Button to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new toolbar
var toolbar = plugins.window.addToolBar('toolbar_0');
// add a button with a text and a method
toolbar.addButton("button", feedback_button);
// add an input array to the button for feedback in the selected method
toolbar.addButton("button", feedback_button, [1, "2", "three"]);
// add an icon to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif");
// add a tooltip to the button
toolbar.addButton("button", feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip");
// show only an icon on the button and disable the button
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", false);
// make the button non visible
toolbar.addButton(null, feedback_button, [1, "2", "three"], "media:///yourimage.gif", "tooltip", true, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
              <parameter name="icon" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addCheckBox">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a CheckBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox with a text and a method
toolbar.addCheckBox("checkbox", feedback_checkbox);
// add an checkbox and set it's state to selected (not selected by default)
toolbar.addCheckBox("checkbox", feedback_checkbox, true);
// add a tooltip to the checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip");
// disable the checkbox and select it
toolbar.addCheckBox("checkbox", feedback_checkbox, true, "tooltip", false);
// make the checkbox non visible
toolbar.addCheckBox("checkbox", feedback_checkbox, false, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addComboBox">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="int"/>
              <argumentType typecode="[Ljava.lang.String;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addComboBox">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="int"/>
              <argumentType typecode="[Ljava.lang.String;"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addComboBox">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="int"/>
              <argumentType typecode="[Ljava.lang.String;"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addComboBox">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="int"/>
              <argumentType typecode="[Ljava.lang.String;"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a ComboBox to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_2");
// add a combobox with the attached method, selected index and input (list) array
toolbar.addComboBox(feedback_combobox, 0, ["input","array","combobox",1]);
// add a tooltip to the combobox
toolbar.addComboBox(feedback_combobox, 1, ["input","array","combobox",2], "tooltip");
// disable the combobox
toolbar.addComboBox(feedback_combobox, 2, ["input","array","combobox",3], "tooltip", false);
// make the combobox non visible
toolbar.addComboBox(feedback_combobox, 3, ["input","array","combobox",4], "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="values" type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addField">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addField">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addField">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addField">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addField">
            <argumentsTypes>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="boolean"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Field to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_3");
// add a field with the attached method and a default text
toolbar.addField(feedback_field, null);
// set the length of the field. 
// default length = 8 when length is not set or set to 0
toolbar.addField(feedback_field, "field", 0, "tooltip");
// add a tooltip to the field
toolbar.addField(feedback_field, null, 10, "tooltip");
// disable the field
toolbar.addField(feedback_field, "field", 5, "tooltip", false);
// make the field non visible
toolbar.addField(feedback_field, "field", 0, "tooltip", false, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="length" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="tooltip" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addSeparator">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a Separator to the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a Separator to the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_0");
// add a button 
toolbar.addButton("button", feedback_button);
// add a separator
toolbar.addSeparator();
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="enableItem">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Enable/disable the item at the specified index.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Enable/disable the item at the specified index.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// disable the button
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.enableItem(1, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="enabled" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeAllItems">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove all Buttons, Checkboxes etc. from the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove all Buttons, Checkboxes etc.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove all items from the toolbar
toolbar.removeAllItems();]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="removeItem">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove a Button, CheckBox, ComboBox from the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove a Button, CheckBox, ComboBox from the toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove the first item (the button in this case) from the toolbar
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.removeItem(1);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="selectCheckBox">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set the CheckBox selection.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set the CheckBox selection.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a checkbox
toolbar.addCheckBox("checkbox 1", feedback_checkbox);
// add another checkbox
toolbar.addCheckBox("checkbox 2", feedback_checkbox);
// set the selection of the checkboxes
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.selectCheckBox(1, false);
toolbar.selectCheckBox(2, true);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="selected" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="selectComboBox">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Select a row of the ComboBox via the index.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Select a row of the ComboBox via the index.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a combobox
toolbar.addComboBox(feedback_combobox, 1, ["one", "two", "three"]);
// add another combobox
toolbar.addComboBox(feedback_combobox, 2, [1, 2, 3, 4, 5]);
// set the selection of the comboboxes
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.selectComboBox(1, 0); // entry "one" will be selected in the first combobox
toolbar.selectComboBox(2, 3); // entry 4 will be selected in the second combobox]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="selection" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setFieldText">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Set a (default) text of the field at the given index.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Set a (default) text of the field at the given index.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a field
toolbar.addField(feedback_field, "field one");
// add another field
toolbar.addField(feedback_field , "field_two");
// set the text of the fields
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.setFieldText(1, "new text 1");
toolbar.setFieldText(2, "new text 2");]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="text" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="validate">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[You need to call this method after adding or removing items to/from the toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[You need to call this method after adding or removing items to/from the toolbar.]]></summary>
            </summaries>
            <deprecated><![CDATA[Obsolete method, no longer needed.]]></deprecated>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// remove the first item (the button in this case) from the toolbar
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.removeItem(1);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="visibleItem">
            <argumentsTypes>
              <argumentType typecode="int"/>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Make the item at the specified index visible/invisible.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Make the item at the specified index visible/invisible.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// add a toolbar
var toolbar = plugins.window.addToolBar("toolbar_1");
// add a button
toolbar.addButton("button", feedback_button);
// add a checkbox
toolbar.addCheckBox("checkbox", feedback_checkbox);
// make the first item (the button) invisible
// REMARK: the pitfall here is that the indexes start at position 1 here
// position 0 is reserved for the toolbar handle!
toolbar.visibleItem(1, false);]]></sample>
            </samples>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
        </functions>
      </object>
      <object clientSupport="wc,sc" publicName="window" qualifiedName="com.servoy.extensions.plugins.window.WindowProvider" scriptingName="plugins.window">
        <functions>
          <function clientSupport="wc,sc" deprecated="true" name="addMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by MenuBar#addMenu().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by MenuBar#addMenu().]]></deprecated>
            <parameters>
              <parameter name="index" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the index at which to add the menu]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="addServoyToolBar">
            <argumentsTypes>
              <argumentType typecode="javax.swing.JComponent"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="javax.swing.JToolBar" typecode="javax.swing.JToolBar"><![CDATA[JToolBar]]></return>
            <deprecated><![CDATA[Replaced by #addToolBar(String).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// create a window
var win = application.createWindow("myWindow", JSWindow.WINDOW);

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar(win,"toolbar_0");
toolbar0.addButton("click me 0", callback_function);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar(win,"toolbar_1", 2);
toolbar1.addButton("click me 1", callback_function);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar(win,"toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", callback_function);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar(win,"toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", callback_function);

win.show(forms.Myform)]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// create a window
var win = application.createWindow("myWindow", JSWindow.WINDOW);

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar(win,"toolbar_0");
toolbar0.addButton("click me 0", callback_function);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar(win,"toolbar_1", 2);
toolbar1.addButton("click me 1", callback_function);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar(win,"toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", callback_function);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar(win,"toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", callback_function);

win.show(forms.Myform)]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
              <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the row inside the toolbar panel where this toolbar is to be added.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// create a window
var win = application.createWindow("myWindow", JSWindow.WINDOW);

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar(win,"toolbar_0");
toolbar0.addButton("click me 0", callback_function);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar(win,"toolbar_1", 2);
toolbar1.addButton("click me 1", callback_function);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar(win,"toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", callback_function);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar(win,"toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", callback_function);

win.show(forms.Myform)]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code]]></description>
              </parameter>
              <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar will be identified in the UI. (for example in the toolbar panel's context menu)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates and returns a toolbar for a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// create a window
var win = application.createWindow("myWindow", JSWindow.WINDOW);

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar(win,"toolbar_0");
toolbar0.addButton("click me 0", callback_function);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar(win,"toolbar_1", 2);
toolbar1.addButton("click me 1", callback_function);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar(win,"toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", callback_function);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar(win,"toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", callback_function);

win.show(forms.Myform)]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code.]]></description>
              </parameter>
              <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar will be identified in the UI. (for example in the toolbar panel's context menu)]]></description>
              </parameter>
              <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the row inside the toolbar panel where this toolbar is to be added.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
              <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the row inside the toolbar panel where this toolbar is to be added.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
              <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar will be identified in the UI. (for example in the toolbar panel's context menu)]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="addToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Add a toolbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method addToolBar only works in the smart client.

// add a toolbar with only a name
var toolbar0 = plugins.window.addToolBar("toolbar_0");
toolbar0.addButton("click me 0", feedback_button);

// add a toolbar with a name and the row you want it to show at
// row number starts at 0
var toolbar1 = plugins.window.addToolBar("toolbar_1", 2);
toolbar1.addButton("click me 1", feedback_button);

// add a toolbar with a name and display name
var toolbar2 = plugins.window.addToolBar("toolbar_2", "toolbar_2_internal_name");
toolbar2.addButton("click me 2", feedback_button);

// add a toolbar with a name, display name and the row you want the
// toolbar to show at. row number starts at 0 
var toolbar3 = plugins.window.addToolBar("toolbar_3", "toolbar_3_internal_name", 3);
toolbar3.addButton("click me 3", feedback_button);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar is identified in code. If display name is missing, name will be used as displayName as well.]]></description>
              </parameter>
              <parameter name="displayname" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name by which this toolbar will be identified in the UI. (for example in the toolbar panel's context menu)]]></description>
              </parameter>
              <parameter name="row" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[the row inside the toolbar panel where this toolbar is to be added.]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="cancelFormPopup">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Close the current form popup panel without assigning a value to the configured data provider.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Close the current form popup panel without assigning a value to the configured data provider.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
// do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="closeFormPopup">
            <argumentsTypes>
              <argumentType typecode="java.lang.Object"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Close the current form popup panel and assign the value to the configured data provider.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Close the current form popup panel and assign the value to the configured data provider.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
// do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
            </samples>
            <parameters>
              <parameter name="retval" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[return value for data provider]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="createCheckboxMenuItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.CheckBox" typecode="com.servoy.extensions.plugins.window.menu.CheckBox"/>
            <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="createMenuItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuItem" typecode="com.servoy.extensions.plugins.window.menu.MenuItem"/>
            <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="createPopupMenu">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Creates a new popup menu that can be populated with items and displayed.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Creates a new popup menu that can be populated with items and displayed.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a popup menu
var menu = plugins.window.createPopupMenu();
// add a menu item
menu.addMenuItem("an entry", feedback);

if (event.getSource()) {
	// display the popup over the component which is the source of the event
	menu.show(event.getSource());
	// display the popup over the components, at specified coordinates relative to the component
	//menu.show(event.getSource(), 10, 10);
	// display the popup at specified coordinates relative to the main window
	//menu.show(100, 100);
}]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="createRadioButtonMenuItem">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.RadioButton" typecode="com.servoy.extensions.plugins.window.menu.RadioButton"/>
            <deprecated><![CDATA[Replaced by Menu class functionality.]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
              </parameter>
              <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[only triggers the shortcut when on this form]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="methodName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[scopes.scopename.methodname or formname.methodname String to target the method to execute]]></description>
              </parameter>
              <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[only triggers the shortcut when on this form]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
              </parameter>
              <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[only triggers the shortcut when on this form]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="createShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="org.mozilla.javascript.Function"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Create a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="method" type="com.servoy.j2db.documentation.scripting.docs.Function" typecode="org.mozilla.javascript.Function">
                <description><![CDATA[the method/function that needs to be called when the shortcut is hit]]></description>
              </parameter>
              <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[only triggers the shortcut when on this form]]></description>
              </parameter>
              <parameter name="arguments" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getMenu">
            <argumentsTypes>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by MenuBar#getMenu(int).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="getMenuBar">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.MenuBar" typecode="com.servoy.extensions.plugins.window.menu.MenuBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the menubar of the main window, or of a named window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the menubar of the main window, or of a named window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// retrieve the menubar of the new window
var menubar = plugins.window.getMenuBar("windowName");
// add a new menu to the menubar, with an item in it
var menu = menubar.addMenu();
menu.text = "New Menu";
menu.addMenuItem("an entry", feedback);
// retrieve the menubar of the main window
var mainMenubar = plugins.window.getMenuBar();
// add a new menu to the menubar of the main window
var menuMain = mainMenubar.addMenu();
menuMain.text = "New Menu in Main Menubar";
menuMain.addMenuItem("another entry", feedback);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getMenuBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.MenuBar" typecode="com.servoy.extensions.plugins.window.menu.MenuBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the menubar of the main window, or of a named window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the menubar of the main window, or of a named window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// retrieve the menubar of the new window
var menubar = plugins.window.getMenuBar("windowName");
// add a new menu to the menubar, with an item in it
var menu = menubar.addMenu();
menu.text = "New Menu";
menu.addMenuItem("an entry", feedback);
// retrieve the menubar of the main window
var mainMenubar = plugins.window.getMenuBar();
// add a new menu to the menubar of the main window
var menuMain = mainMenubar.addMenu();
menuMain.text = "New Menu in Main Menubar";
menuMain.addMenuItem("another entry", feedback);]]></sample>
            </samples>
            <parameters>
              <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the name of the window]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getMenuCount">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <deprecated><![CDATA[Replaced by MenuBar#getMenuCount().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="getMenuIndexByText">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int"/>
            <deprecated><![CDATA[Replaced by MenuBar#getMenuIndexByText(String).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="getToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the toolbar of a specific window from the toolbar panel by name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the toolbar of a specific window from the toolbar panel by name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getToolBar only works in the smart client.

// create a window
	var win = application.createWindow("myWindow", JSWindow.WINDOW);
// the toolbar must first be created with a call to addToolbar
plugins.window.addToolBar(win,"toolbar_0");

// show the empty toolbar and wait 4 seconds  
win.show(forms.MyForm)
application.updateUI(4000)

// get the toolbar at the panel by name
var toolbar = plugins.window.getToolBar(win,"toolbar_0");
// add a button to the toolbar
toolbar.addButton("button", callback_function);]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.swing.ToolBar" typecode="com.servoy.extensions.plugins.window.menu.swing.ToolBar"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get the toolbar from the toolbar panel by name.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get the toolbar from the toolbar panel by name.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getToolBar only works in the smart client.

// the toolbar must first be created with a call to addToolbar
plugins.window.addToolBar("toolbar_0");

// get the toolbar at the panel by name
var toolbar = plugins.window.getToolBar("toolbar_0");
// add a button to the toolbar
toolbar.addButton("button", feedback_button);]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="getToolbarNames">
            <argumentsTypes/>
            <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all toolbar names from the toolbar panel.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all toolbar names from the toolbar panel.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getToolbarNames only works in the smart client.

// create an array of toolbar names
var names = plugins.window.getToolbarNames();

// create an empty message variable
var message = "";

// loop through the array
for (var i = 0 ; i < names.length ; i++) {
	//add the name(s) to the message
	message += names[i] + "\n";
}

// show the message
plugins.dialogs.showInfoDialog("toolbar names", message);]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="getToolbarNames">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.String[]" typecode="[Ljava.lang.String;"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Get all toolbar names from the toolbar panel of a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Get all toolbar names from the toolbar panel of a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method getToolbarNames only works in the smart client.
// create a window 
	var win = application.createWindow("myWindow", JSWindow.WINDOW);
// the toolbar must first be created with a call to addToolbar
	 plugins.window.addToolBar(win,"toolbar_0");
  plugins.window.addToolBar(win,"toolbar_1");
// create an array of toolbar names
var names = plugins.window.getToolbarNames(win);

// create an empty message variable
var message = "";

// loop through the array
for (var i = 0 ; i < names.length ; i++) {
	//add the name(s) to the message
	message += names[i] + "\n";
}

// show the message
plugins.dialogs.showInfoDialog("toolbar names", message);]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="maximize">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// maximize the main window:
plugins.window.maximize();

// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// maximize the window
plugins.window.maximize("windowName");]]></sample>
            </samples>
          </function>
          <function clientSupport="wc,sc" name="maximize">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Maximize the current window or the window with the specified name (Smart client only).]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// maximize the main window:
plugins.window.maximize();

// create a new window
var win = application.createWindow("windowName", JSWindow.WINDOW);
// show a form in the new window
forms.my_form.controller.show(win);
// maximize the window
plugins.window.maximize("windowName");]]></sample>
            </samples>
            <parameters>
              <parameter name="windowName" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="register">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <deprecated><![CDATA[Obsolete method.]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="removeAllMenus">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Menu" typecode="com.servoy.extensions.plugins.window.menu.Menu"/>
            <deprecated><![CDATA[Replaced by MenuBar#removeAllMenus().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="removeMenu">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by MenuBar#removeMenu(int).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="removeServoyToolBar">
            <argumentsTypes>
              <argumentType typecode="javax.swing.JComponent"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #removeToolBar(String).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="removeShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeShortcut">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove a shortcut.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove a shortcut.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// this plugin uses the java keystroke parser
// see http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
// global handler
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut);
// global handler with a form context filter
plugins.window.createShortcut('control shift I', scopes.globals.handleOrdersShortcut, 'frm_contacts');
// form method called when shortcut is used
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut);
// form method called when shortcut is used and arguments are passed to the method
plugins.window.createShortcut('control RIGHT', forms.frm_contacts.handleMyShortcut, new Array(argument1, argument2));
// Passing the method argument as a string prevents unnecessary form loading
//plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', new Array(argument1, argument2));
// Passing the method as a name and the contextFilter set so that this shortcut only trigger on the form 'frm_contacts'.
plugins.window.createShortcut('control RIGHT', 'frm_contacts.handleMyShortcut', 'frm_contacts', new Array(argument1, argument2));
// Num Lock and Substract shortcuts 
plugins.window.createShortcut("NUMPAD8", handleMyShortcut);
plugins.window.createShortcut("SUBTRACT", handleMyShortcut);
// remove global shortcut and form-level shortcut
plugins.window.removeShortcut('menu 1');
plugins.window.removeShortcut('control RIGHT', 'frm_contacts');
// shortcut handlers are called with an JSEvent argument
///* 
// * Handle keyboard shortcut.
// * 
// * @param {JSEvent} event the event that triggered the action
// */
//function handleShortcut(event)
//{
//  application.output(event.getType()) // returns 'menu 1'
//  application.output(event.getFormName()) // returns 'frm_contacts'
//  application.output(event.getElementName()) // returns 'contact_name_field' or null when no element is selected
//}
// NOTES: 
// 1) shortcuts will not override existing operating system or browser shortcuts,
// choose your shortcuts carefully to make sure they work in all clients.
// 2) always use lower-case letters for modifiers (shift, control, etc.), otherwise createShortcut will fail.]]></sample>
            </samples>
            <parameters>
              <parameter name="shortcut" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
              <parameter name="contextFilter" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[only triggers the shortcut when on this form]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeToolBar">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.scripting.JSWindow"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove the toolbar from the toolbar panel of a specific window.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove the toolbar from the toolbar panel of a specific window.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method removeToolBar only works in the smart client.
// create a window 
	var win = application.createWindow("myWindow", JSWindow.WINDOW);
// the toolbar must first be created with a call to addToolbar
var toolbar = plugins.window.addToolBar(win,"toolbar_0");

// add a button to the toolbar
toolbar.addButton("button", callcbackMethod);

// show the toolbar with the button and wait 4 seconds, then remove it
win.show(forms.MyForm)
application.updateUI(4000)

// removing a toolbar from the toolbar panel is done by name
// the plugin checks the existence of the toolbar
// when the toolbar does not exist it will not throw an error though.
plugins.window.removeToolBar(win,"toolbar_0");]]></sample>
            </samples>
            <parameters>
              <parameter name="window" type="com.servoy.j2db.scripting.JSWindow" typecode="com.servoy.j2db.scripting.JSWindow"/>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="removeToolBar">
            <argumentsTypes>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Remove the toolbar from the toolbar panel.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Remove the toolbar from the toolbar panel.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Note: method removeToolBar only works in the smart client.

// the toolbar must first be created with a call to addToolbar
var toolbar = plugins.window.addToolBar("toolbar_0");

// add a button to the toolbar
toolbar.addButton("button", feedback_button);

// removing a toolbar from the toolbar panel is done by name
// the plugin checks the existence of the toolbar
// when the toolbar does not exist it will not throw an error though.
plugins.window.removeToolBar("toolbar_0");]]></sample>
            </samples>
            <parameters>
              <parameter name="name" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="resetMenuBar">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by MenuBar#reset().]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="setFullScreen">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Bring the window into/out of fullsceen mode.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Bring the window into/out of fullsceen mode.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// active fullscreen mode 
plugins.window.setFullScreen(true);]]></sample>
            </samples>
            <parameters>
              <parameter name="full" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setMenuVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by Menu#setVisible(boolean).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setMouseOverPopup">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
            <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setPopup">
            <argumentsTypes/>
            <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
            <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setPopup">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="com.servoy.extensions.plugins.window.menu.Popup" typecode="com.servoy.extensions.plugins.window.menu.Popup"/>
            <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
            <parameters>
              <parameter name="args" type="com.servoy.j2db.documentation.scripting.docs.Object[]" typecode="[Ljava.lang.Object;">
                <description><![CDATA[array of arguments]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setStatusBarVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show or hide the statusbar.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show or hide the statusbar.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// hide the statusbar
plugins.window.setStatusBarVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="setToolBarAreaVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show or hide the toolbar area.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show or hide the toolbar area.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// hide the toolbar area
plugins.window.setToolBarAreaVisible(false);]]></sample>
            </samples>
            <parameters>
              <parameter name="visible" type="com.servoy.j2db.documentation.scripting.docs.Boolean" typecode="boolean"/>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="setToolBarVisible">
            <argumentsTypes>
              <argumentType typecode="boolean"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #setToolBarAreaVisible(boolean).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" name="showFormPopup">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
              <argumentType typecode="com.servoy.j2db.IForm"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
// do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
            </samples>
            <parameters>
              <parameter name="elementToShowRelatedTo" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent">
                <description><![CDATA[element to show related to or null to center in screen]]></description>
              </parameter>
              <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.IForm">
                <description><![CDATA[the form to show]]></description>
              </parameter>
              <parameter name="scope" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the scope to put retval into]]></description>
              </parameter>
              <parameter name="dataproviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider of scope to fill]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" name="showFormPopup">
            <argumentsTypes>
              <argumentType typecode="com.servoy.j2db.ui.IComponent"/>
              <argumentType typecode="com.servoy.j2db.IForm"/>
              <argumentType typecode="java.lang.Object"/>
              <argumentType typecode="java.lang.String"/>
              <argumentType typecode="int"/>
              <argumentType typecode="int"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <descriptions>
              <description clientSupport="wc,sc"><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></description>
            </descriptions>
            <summaries>
              <summary clientSupport="wc,sc"><![CDATA[Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.]]></summary>
            </summaries>
            <samples>
              <sample clientSupport="wc,sc"><![CDATA[// Show a form as popup panel, where the closeFormPopup can pass return a value to a dataprovider in the specified scope.
plugins.window.showFormPopup(null,forms.orderPicker,foundset.getSelectedRecord(),"order_id");
// do call closeFormPopup(ordervalue) from the orderPicker form]]></sample>
            </samples>
            <parameters>
              <parameter name="elementToShowRelatedTo" type="com.servoy.j2db.documentation.scripting.docs.IRuntimeComponent" typecode="com.servoy.j2db.ui.IComponent">
                <description><![CDATA[element to show related to or null to center in screen]]></description>
              </parameter>
              <parameter name="form" type="com.servoy.j2db.documentation.scripting.docs.Form" typecode="com.servoy.j2db.IForm">
                <description><![CDATA[the form to show]]></description>
              </parameter>
              <parameter name="scope" type="com.servoy.j2db.documentation.scripting.docs.Object" typecode="java.lang.Object">
                <description><![CDATA[the scope to put retval into]]></description>
              </parameter>
              <parameter name="dataproviderID" type="com.servoy.j2db.documentation.scripting.docs.String" typecode="java.lang.String">
                <description><![CDATA[the dataprovider of scope to fill]]></description>
              </parameter>
              <parameter name="width" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[popup width]]></description>
              </parameter>
              <parameter name="height" type="com.servoy.j2db.documentation.scripting.docs.Number" typecode="int">
                <description><![CDATA[popup height]]></description>
              </parameter>
            </parameters>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="showPopupMenu">
            <argumentsTypes>
              <argumentType typecode="[Ljava.lang.Object;"/>
            </argumentsTypes>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by #createPopupMenu(Object[]).]]></deprecated>
          </function>
          <function clientSupport="wc,sc" deprecated="true" name="validateMenuBar">
            <argumentsTypes/>
            <return type="void" typecode="void"/>
            <deprecated><![CDATA[Replaced by MenuBar#validate().]]></deprecated>
          </function>
        </functions>
      </object>
    </plugins>
  </servoydoc>
</servoyextension>
